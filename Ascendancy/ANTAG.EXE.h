/*
   This file has been generated by IDA.
   It contains local type definitions from
   the type library 'ANTAG.EXE'
*/

#define __int8 char
#define __int16 short
#define __int32 int
#define __int64 long long

struct __iobuf;
struct T_GSystem;
struct T_WndA2;
struct WINDOW;
struct VDI_HDR;
struct SEQUENCE;
struct MDI_DDT;
struct MDI_DST;
struct MDI_DRIVER;
struct DIG_DDT;
struct DIG_DST;
struct SAMPLE;
struct T_Star;
struct T_Planet;
struct T_Ship;
struct T_Lane;
struct VFX_FONT;
struct T_Wnd10LB;
struct T_Wnd04BM;
struct T_Wnd02COSW;
struct T_HullCell;
struct T_Wnd13DBGWND;
struct PANE_LIST;
struct T_Procs;
struct T_Square;
struct T_BatDisplayItem;
struct T_Type23;
union RW_DTREG;
union RO_DTREG;
struct T_CWDisplayItem;
struct T_Control;

/* 1 */
typedef __iobuf FILE;

/* 2 */
#pragma pack(push, 1)
struct __iobuf
{
  unsigned __int8 *_ptr;
  int _cnt;
  unsigned __int8 *_base;
  unsigned int _flag;
  int _handle;
  unsigned int _bufsize;
  unsigned __int8 _ungotten;
  unsigned __int8 _tmpfchar;
};
#pragma pack(pop)

/* 4 */
#pragma pack(push, 1)
struct DWORDREGS
{
  unsigned int eax;
  unsigned int ebx;
  unsigned int ecx;
  unsigned int edx;
  unsigned int esi;
  unsigned int edi;
  unsigned int cflag;
};
#pragma pack(pop)

/* 5 */
#pragma pack(push, 1)
struct WORDREGS
{
  unsigned __int16 ax;
  unsigned __int16 _1;
  unsigned __int16 bx;
  unsigned __int16 _2;
  unsigned __int16 cx;
  unsigned __int16 _3;
  unsigned __int16 dx;
  unsigned __int16 _4;
  unsigned __int16 si;
  unsigned __int16 _5;
  unsigned __int16 di;
  unsigned __int16 _6;
  unsigned int cflag;
};
#pragma pack(pop)

/* 6 */
#pragma pack(push, 1)
struct BYTEREGS
{
  unsigned __int8 al;
  unsigned __int8 ah;
  unsigned __int16 _1;
  unsigned __int8 bl;
  unsigned __int8 bh;
  unsigned __int16 _2;
  unsigned __int8 cl;
  unsigned __int8 ch;
  unsigned __int16 _3;
  unsigned __int8 dl;
  unsigned __int8 dh;
  unsigned __int16 _4;
};
#pragma pack(pop)

/* 3 */
#pragma pack(push, 1)
union REGS
{
  DWORDREGS x;
  WORDREGS w;
  BYTEREGS h;
};
#pragma pack(pop)

/* 7 */
#pragma pack(push, 1)
struct SREGS
{
  unsigned __int16 es;
  unsigned __int16 cs;
  unsigned __int16 ss;
  unsigned __int16 ds;
  unsigned __int16 fs;
  unsigned __int16 gs;
};
#pragma pack(pop)

/* 8 */
#pragma pack(push, 1)
struct tm
{
  int tm_sec;
  int tm_min;
  int tm_hour;
  int tm_mday;
  int tm_mon;
  int tm_year;
  int tm_wday;
  int tm_yday;
  int tm_isdst;
};
#pragma pack(pop)

/* 10 */
typedef unsigned int size_t;

/* 9 */
#pragma pack(push, 1)
struct _heapinfo
{
  void far *_pentry;
  size_t _size;
  int _useflag;
};
#pragma pack(pop)

/* 11 */
#pragma pack(push, 1)
struct exception
{
  int type;
  char *name;
  double arg1;
  double arg2;
  double retval;
};
#pragma pack(pop)

/* 12 */
typedef void **va_list;

/* 167 */
typedef char T_Name256[256];

/* 13 */
struct __attribute__((packed)) T_CFile
{
  int fh;
  T_Name256 fname;
  int d4;
  int index;
  void *d;
  int Unknown_110;
  int Unknown_114;
};

/* 14 */
typedef T_CFile *P_CFile;

/* 15 */
typedef int BOOL;

/* 16 */
enum MACRO_O
{
  O_WRONLY = 0x1,
  O_RDWR = 0x2,
  O_APPEND = 0x10,
  O_CREAT = 0x20,
  O_TRUNC = 0x40,
  O_NOINHERIT = 0x80,
  O_TEXT = 0x100,
  O_BINARY = 0x200,
  O_EXCL = 0x400,
};

/* 111 */
typedef char T_Name50[50];

/* 17 */
struct __attribute__((packed)) T_CobFiles
{
  T_Name50 fnames[500];
  int foffsets[500];
  int totalfiles;
  int nextcobstart[5];
  T_Name50 cobnames[5];
  int coblengths[5];
  int totalcobs;
};

/* 18 */
typedef T_CobFiles *P_CobFiles;

/* 19 */
enum MACRO_EOF
{
  EOF = -1,
};

/* 75 */
struct __attribute__((packed)) T_WinEntry
{
  int activeCount;
  T_WndA2 *pWndA2;
  int c;
};

/* 73 */
typedef signed __int16 WORD;

/* 256 */
typedef PANE_LIST *PPANE_LIST;

/* 66 */
typedef unsigned __int8 UBYTE;

/* 62 */
typedef UBYTE T_HazeTable[256];

/* 83 */
typedef char BYTE;

/* 67 */
typedef signed int LONG;

/* 69 */
struct PANE
{
  WINDOW *window;
  LONG x0;
  LONG y0;
  LONG x1;
  LONG y1;
};

/* 257 */
struct T_Font
{
  VFX_FONT *pVfxFont;
  BYTE *pFontTranslate;
  PANE pane;
  int backColor;
};

/* 279 */
struct T_WinState
{
  WORD Unknown_0;
  WORD _windowCount;
  int _wndIndexes[32];
  WORD Unknown_84;
  void *Proc1;
  void *Proc2;
};

/* 313 */
struct __attribute__((packed)) T_WinMsg
{
  WORD message;
  LONG param1;
  LONG param2;
};

/* 25 */
struct __attribute__((packed)) T_SomeStruct5
{
  int a;
  __int16 b;
  int c;
  int d;
  int e;
  int f;
};

/* 254 */
struct T_WinEventSmall
{
  int hwnd;
  int f;
  WORD msg;
  int p1;
  int p2;
};

/* 84 */
typedef LONG HTIMER;

/* 265 */
struct T_GameEvent
{
  WORD eventId;
  int p1;
  int p2;
};

/* 252 */
struct T_WinEvent
{
  int time;
  int hwnd;
  WORD eventType;
  WORD msg;
  int p1;
  int p2;
  int f;
};

/* 250 */
typedef T_Wnd13DBGWND *P_Wnd13DBGWND;

/* 22 */
struct __attribute__((packed)) T_WinData
{
  int category;
  int time;
  char name[20];
  void *pData;
};

/* 70 */
struct __attribute__((packed)) T_Cache
{
  void *_pointers[200];
  int sizes[200];
  WORD usageOrder[200];
  T_Name50 names[200];
  WORD count;
  WORD activeCount;
  void *pShapeCache;
  LONG size;
  BOOL locked;
};

/* 20 */
struct __attribute__((packed)) T_WinMgr
{
  T_WinEntry wnds[1024];
  WORD wndsCnt;
  int _wndIndex;
  PPANE_LIST pPaneList;
  WINDOW *window;
  T_HazeTable *hazeTables[6];
  T_Font SmallFont;
  T_Font LargeFont;
  T_WinState winStates[32];
  WORD _activeStateCount;
  __int16 state;
  __int16 Unknown_422A;
  T_WinMsg messageQueue[64];
  WORD messageQueueCount;
  T_SomeStruct5 b1[16];
  __int16 counter1;
  T_WinEventSmall winEventsSmall[16];
  WORD winEventSmallNum;
  HTIMER timer;
  WORD Unknown_4736[16];
  __int16 Unknown_4756;
  __int16 Unknown_4758;
  WORD gameEventsNum;
  __int16 Unknown_475C;
  T_GameEvent gameEvents[32];
  int Unknown_489E;
  int Unknown_48A2;
  int aaa;
  int bbb;
  int Unknown_48AE;
  int Unknown_48B2;
  int _time;
  int winEventsNum;
  int Unknown_48BE;
  T_WinEvent winEvents[5000];
  int Unknown_21D82[4];
  P_Wnd13DBGWND pWnd13DBGWND;
  T_WinData winDatas[384];
  WORD winDatasNum;
  int showFPS;
  int Unknown_24D9C;
  int stealingCheatMode;
  int Unknown_24DA4;
  int prevCornerIndex;
  float _version;
  T_Cache cache;
};

/* 37 */
typedef T_WndA2 *P_WndA2;

/* 176 */
typedef P_WndA2 T_ChildWindows[20];

/* 308 */
struct __attribute__((packed)) T_Type19
{
  char Unknown_0;
  int cacheIndex;
  int _shapeNumber;
  WORD hotX;
  WORD hotY;
};

/* 264 */
typedef T_Procs *P_Procs;

/* 36 */
struct __attribute__((packed)) T_WndA2
{
  int magic12345678;
  PANE pane;
  _WORD shapeCacheIndex;
  _DWORD Unknown_1A;
  WORD shapeNumber;
  char name[21];
  _DWORD Unknown_35;
  _DWORD Unknown_39;
  _DWORD _mouseFocus;
  int index;
  WORD sendMessage;
  LONG sendParam1;
  LONG sendParam2;
  char helpIndex[10];
  WORD soundNumber;
  WORD _x;
  WORD _y;
  BOOL framed;
  int parentIndex;
  T_ChildWindows *children;
  WORD childrenNum;
  T_Type19 _t19[4];
  WORD _t19Num;
  _DWORD Unknown_A3;
  P_Procs pProcs;
};

/* 58 */
typedef unsigned int ULONG;

/* 255 */
struct PANE_LIST
{
  PANE *array;
  ULONG *flags;
  LONG size;
};

/* 68 */
typedef unsigned __int8 STENCIL;

/* 64 */
struct WINDOW
{
  UBYTE *buffer;
  LONG x_max;
  LONG y_max;
  STENCIL *stencil;
  UBYTE *shadow;
};

/* 194 */
struct VFX_FONT
{
  LONG version;
  LONG char_count;
  LONG char_height;
  LONG font_background;
  LONG offsets[128];
};

/* 249 */
struct __attribute__((packed)) T_Wnd13DBGWND
{
  T_WndA2 super;
  PANE pane;
  char tabIndex;
};

/* 228 */
typedef void (__fastcall __spoils<edx> *pFUNdtor)(void *self, unsigned int);

/* 363 */
typedef void (__fastcall *P_Proc2)(P_WndA2 pWnd, WORD xOffset, WORD yOffset);

/* 63 */
typedef unsigned __int16 UWORD;

/* 294 */
typedef int (__fastcall *P_Proc3)(P_WndA2 pWnd, UWORD message, int param1, int param2);

/* 300 */
typedef void (__fastcall *P_Proc4)(P_WndA2 pWnd, int a2);

/* 310 */
typedef void (__fastcall *P_Proc5)(P_WndA2 pWnd, int a2);

/* 295 */
typedef void (__fastcall *P_Proc6)(P_WndA2 pWnd, P_CFile pfi, BOOL read);

/* 263 */
struct __cppobj T_Procs
{
  pFUNdtor dtor;
  P_Proc2 proc2_translatePane;
  P_Proc3 proc3_msg;
  P_Proc4 proc4_draw;
  P_Proc5 proc5;
  P_Proc6 proc6_file;
};

/* 21 */
typedef T_WinMgr *P_WinMgr;

/* 23 */
typedef T_WinData *P_WinData;

/* 28 */
typedef T_GSystem *P_GSystem;

/* 31 */
struct T_Rect
{
  int x1;
  int y1;
  int x2;
  int y2;
};

/* 24 */
struct __attribute__((packed)) T_Type5
{
  P_GSystem a;
  T_Rect rect;
};

/* 344 */
typedef char T_Name255[255];

/* 86 */
struct RGB
{
  UBYTE r;
  UBYTE g;
  UBYTE b;
};

/* 168 */
typedef RGB T_Palette[256];

/* 65 */
typedef T_HazeTable T_HazeTables[23];

/* 27 */
struct __attribute__((packed)) T_GSystem
{
  WINDOW window;
  PANE pane;
  int a;
  int b;
  T_Name255 fname;
  int Unknown_12F;
  T_Palette palette1;
  T_Palette palette2;
  void *mouseShapeTable;
  int mouseShapeNum;
  T_HazeTables *hazeTables;
  WORD numTables;
  char Unknown[8];
};

/* 26 */
typedef T_SomeStruct5 *P_SomeStruct5;

/* 29 */
struct __attribute__((packed)) T_StaticStrings
{
  char *index[200];
  char buffer[8000];
  int loaded;
  int count;
};

/* 30 */
typedef T_StaticStrings *P_StaticStrings;

/* 32 */
typedef T_Rect *P_Rect;

/* 33 */
typedef T_Type5 *P_Type5;

/* 34 */
struct __attribute__((packed)) T_Wnd
{
  int magic12345678;
  PANE pane;
  _WORD shapeCacheIndex;
  _DWORD Unknown_1A;
  WORD shapeNumber;
  char name[21];
  _DWORD Unknown_35;
  _DWORD Unknown_39;
  _DWORD _mouseFocus;
  int index;
  WORD sendMessage;
  LONG sendParam1;
  LONG sendParam2;
  char helpIndex[10];
  _WORD Unknown_59;
  WORD _x;
  WORD _y;
  BOOL framed;
  int parentIndex;
  T_ChildWindows *children;
  WORD childrenNum;
  T_Type19 _t19[4];
  WORD _t19Num;
  _DWORD Unknown_A3;
};

/* 35 */
typedef T_Wnd *P_Wnd;

/* 360 */
typedef T_Control *P_Control;

/* 38 */
struct __attribute__((packed)) T_Wnd03CTW
{
  T_WndA2 a2;
  P_Control pControls;
  __int16 numControls;
  __int16 e;
};

/* 359 */
struct __attribute__((packed)) T_Control
{
  WORD mask;
  WORD x0;
  WORD x1;
  WORD y0;
  WORD y1;
  WORD Unknown_A;
  WORD Unknown_C;
};

/* 39 */
typedef T_Wnd03CTW *P_Wnd03CTW;

/* 40 */
struct __attribute__((packed)) T_Wnd25TW
{
  T_WndA2 a2;
  int buttonState;
};

/* 41 */
typedef T_Wnd25TW *P_Wnd25TW;

/* 266 */
typedef T_GameEvent *P_GameEvent;

/* 42 */
struct __attribute__((packed)) T_Wnd23EW
{
  T_WndA2 a2;
  char z[3050];
  char Unknown_C95[27];
  char Unknown_CB0[243];
  char Unknown_DA3[12];
  P_GameEvent pGameEvent;
};

/* 43 */
typedef T_Wnd23EW *P_Wnd23EW;

/* 170 */
typedef char T_Name20[20];

/* 258 */
typedef T_Font *P_Font;

/* 259 */
struct T_HelpItem
{
  char Unknown_04;
  __int16 x0;
  __int16 y0;
  char *pText;
  __int16 Unknown_9;
  P_Font pFont;
  ULONG flags;
  __int16 posX;
  __int16 posY;
  BOOL _hasNextPage;
};

/* 44 */
struct __attribute__((packed)) T_Wnd20HW
{
  T_WndA2 super;
  char fileName[30];
  T_Name20 helpTopic;
  char buffer[3000];
  T_HelpItem helpItems[10];
  int helpItemsNum;
  int Unknown_DA7;
  int pagesNum;
};

/* 45 */
typedef T_Wnd20HW *P_Wnd20HW;

/* 196 */
typedef T_Wnd10LB *P_Wnd10LB;

/* 239 */
typedef T_Wnd02COSW *P_Wnd02COSW;

/* 46 */
struct __attribute__((packed)) T_Wnd21NW
{
  T_WndA2 super;
  P_Wnd10LB pPlayerDipListBox;
  P_Wnd10LB pAlienDipListBox;
  P_Wnd02COSW pCosWnd;
  int Unknown_B7;
  __int16 Unknown_BB;
  __int16 Unknown_BD;
  __int16 Unknown_BF;
  __int16 Unknown_C1;
};

/* 314 */
struct __attribute__((packed)) T_ListBoxItem
{
  void *pData;
  int value;
};

/* 362 */
typedef UWORD (__fastcall *P_GetItemHeightFunc)(void *pData, int param1, int param2);

/* 361 */
typedef void (__fastcall *P_DrawItemFunc)(PANE *pPane, void *pData, int param1, BOOL hovered);

/* 195 */
struct __attribute__((packed)) T_Wnd10LB
{
  T_WndA2 a2;
  char *_choiceText;
  int Unknown_AF;
  int hasScrollBar;
  int Unknown_B7;
  int Unknown_BB;
  int scrollBarWidth;
  char largeScrollBar;
  UBYTE _borderColor;
  UBYTE Unknown_C5;
  UBYTE wipeColor;
  T_ListBoxItem items[256];
  UWORD itemCount;
  UWORD _defaultItemHeight;
  UWORD _scrollOffset;
  UWORD _selectedIndex;
  WORD hoveredItemIndex;
  PANE pane;
  UBYTE scrollThumbState;
  int memPoolAllocated;
  void *pMemPool;
  int Unknown_8EE;
  int memPoolSize;
  P_GetItemHeightFunc getItemHeightFunc;
  P_DrawItemFunc drawItemFunc;
  void *pfnCompareProc;
};

/* 351 */
typedef T_CWDisplayItem *P_CWDisplayItem;

/* 98 */
struct T_Vector3D
{
  float x;
  float y;
  float z;
};

/* 268 */
struct T_Matrix3x3D
{
  T_Vector3D vector1;
  T_Vector3D vector2;
  T_Vector3D vector3;
};

/* 286 */
struct T_Matrix3x4
{
  float _[3][4];
};

/* 285 */
struct T_Matrix3x3
{
  float _[3][3];
};

/* 240 */
#pragma pack(push, 1)
struct T_Camera
{
  T_Matrix3x3D matrix_00;
  float FOV;
  float _scaleFactor;
  float nearClip;
  float farClip;
  T_Vector3D position;
  T_Matrix3x4 trs;
  float _projectionScale;
  T_Matrix3x3 _viewMatrix;
};
#pragma pack(pop)

/* 352 */
struct T_Wnd02COSWt1
{
  int Unknown_0[256];
  int num;
};

/* 238 */
struct __attribute__((packed)) T_Wnd02COSW
{
  T_WndA2 a;
  void *Unknown_AB;
  void *Unknown_AF;
  P_CWDisplayItem pDisplayItems;
  UWORD displayItemsCount;
  UWORD displayItemsCapacity;
  int Unknown_BB;
  char backgroundColor;
  int Unknown_C0;
  int Unknown_C4;
  int Unknown_C8;
  int Unknown_CC;
  int Unknown_D0;
  int Unknown_D4;
  char Unknown_D8;
  char Unknown_D9;
  T_Camera camera;
  T_Wnd02COSWt1 Unknown_172;
  UWORD _viewportWidth;
  UWORD _viewportHeight;
  float _fov;
  int cursorShape;
  int Unknown_582;
  int Unknown_586;
  int Unknown_58A;
  int Unknown_58E;
  int Unknown_592;
};

/* 180 */
typedef T_Planet *P_Planet;

/* 123 */
typedef T_Ship *P_Ship;

/* 178 */
typedef T_Star *P_Star;

/* 191 */
typedef T_Lane *P_Lane;

/* 290 */
union P_TargetObject
{
  P_Planet pPlanet;
  P_Ship pShip;
  P_Star pStar;
  P_Lane pLane;
};

/* 350 */
struct __attribute__((packed)) T_CWDisplayItem
{
  P_TargetObject pObject;
  UBYTE targetType;
  char Unknown_05[16];
};

/* 272 */
typedef T_Square *P_Square;

/* 325 */
struct __attribute__((packed)) T_Type22
{
  T_Type23 *pt23;
  P_Ship pShip;
  int Unknown_8;
};

/* 179 */
struct __attribute__((packed)) T_Planet
{
  T_Vector3D position;
  WORD starIndex;
  WORD Unknown_E;
  P_Square pSquares;
  UWORD size;
  UWORD type;
  UWORD surfaceSquaresNum;
  UWORD totalSquaresNum;
  UWORD freeSurfaceSquaresNum;
  WORD freeOrbitalSquaresNum;
  UWORD blackSquaresNum;
  __int16 Unknown_22;
  char name[30];
  UWORD population;
  UWORD industry;
  UWORD research;
  UWORD prosperity;
  UWORD maximumPopulation;
  UWORD usedPopulation;
  __int16 Unknown_4E;
  UWORD buildingProgress;
  UWORD _squareIndex;
  UBYTE buildingPlanetItemIndex;
  UWORD maximumPopulation2;
  UBYTE raceIndex;
  BYTE byte58;
  BYTE byte59;
  int Unknown_5A;
  int Unknown_5E;
  int invincible;
  BYTE flags;
  int dayColonized;
  T_Type22 t22;
  int Unknown_77;
};

/* 260 */
union P_Location
{
  P_Planet pPlanet;
  P_Star pStar;
  P_Lane pLane;
};

/* 248 */
typedef T_HullCell *P_HullCell;

/* 292 */
struct __attribute__((packed)) T_Target
{
  BYTE type;
  P_TargetObject pObject;
};

/* 247 */
struct __attribute__((packed)) T_HullCell
{
  BYTE gizmoIndex;
  WORD _usesPerTurnLeft;
  BOOL active;
};

/* 187 */
struct __attribute__((packed)) T_Ship
{
  int totalWeaponDamage;
  int totalShieldStrength;
  int totalStarLaneDrivePotential;
  int totalStarLaneHyperdrivePotential;
  int totalDriveMaxDistance;
  int Unknown_14;
  int totalGeneratorPower;
  int totalPowerForDrives;
  int totalScannerRangePerTurn;
  int cloakingLevel;
  int hasColonizer;
  int Unknown_2C;
  int Unknown_30;
  char name[30];
  int _dayBuilt;
  WORD raceIndex;
  UBYTE locationType;
  P_Location pLocation;
  BYTE order;
  P_TargetObject _orderTargetObject;
  __int8 Unknown_62;
  P_HullCell pCurHullCell;
  T_Target _target;
  T_Vector3D Unknown_6C;
  T_Vector3D Unknown_78;
  int Unknown_84;
  int availablePower;
  int hullIntegrity;
  int _currentShieldStrength;
  int availableMoves;
  int fullHullIntegrity;
  WORD specialEffects;
  T_Vector3D position;
  BYTE hullSize;
  T_HullCell hullCells[25];
  int hullCellsNum;
  int gizmosNum;
};

/* 177 */
#pragma pack(push, 1)
struct T_Star
{
  int type;
  __int16 index;
  WORD connectionGroupIndex;
  T_Vector3D position;
  UBYTE planetsRacesBits;
  UBYTE shipsRacesBits;
  UBYTE exploredPathToBits;
  UBYTE exploredBits;
  ULONG flags;
  char name[16];
  P_Lane lanes[6];
  WORD lanesNum;
  P_Planet planets[5];
  WORD planetsNum;
  BOOL Unknown_5C;
};
#pragma pack(pop)

/* 190 */
struct __attribute__((packed)) T_Lane
{
  P_Star pStar1;
  P_Star pStar2;
  T_Vector3D vector1;
  T_Vector3D vector2;
  UBYTE exploredBits;
  WORD _controlledBy;
  char flags;
  char Unknown_24[3];
};

/* 271 */
struct T_Square
{
  UBYTE color;
  UBYTE planetItemIndex;
  UWORD flags;
};

/* 326 */
struct __attribute__((packed)) T_Type23
{
  UBYTE Unknown_0;
  UBYTE planetItemIndex;
  UWORD Unknown_2;
};

/* 47 */
typedef T_Wnd21NW *P_Wnd21NW;

/* 222 */
typedef T_Wnd04BM *P_Wnd04BM;

/* 48 */
struct __attribute__((packed)) T_Wnd19BC
{
  T_WndA2 a2;
  T_Target target;
  BYTE Unknown_B0;
  int Unknown_B1;
  P_Wnd10LB pWnd10LB;
  BYTE Unknown_B9;
  BYTE h;
  P_Wnd04BM pWnd04BM;
  int Unknown_BF;
  char z;
  int j1;
  T_Vector3D Unknown_C8;
  WORD Unknown_D4;
  int Unknown_D6;
  __int16 Unknown_DA[7];
  int Unknown_E8[7];
  int Unknown_104;
};

/* 49 */
typedef T_Wnd19BC *P_Wnd19BC;

/* 318 */
typedef T_BatDisplayItem *P_BatDisplayItem;

/* 293 */
typedef T_Target *P_Target;

/* 243 */
struct T_Type16
{
  float Unknown_00;
  float Unknown_04;
  float Unknown_08;
  float Unknown_0C;
  float Unknown_10;
  float Unknown_14;
  float Unknown_18;
  float Unknown_1C;
  float Unknown_20;
};

/* 245 */
struct __attribute__((packed)) T_GizmoValShape
{
  WORD shape1;
  WORD shape2;
};

/* 246 */
struct __attribute__((packed)) T_GizmoValSfx
{
  WORD sfx1;
  WORD sfx2;
};

/* 306 */
struct T_Wnd04BMt3
{
  P_Target _targets[512];
  int num;
};

/* 298 */
typedef signed int FIXED16;

/* 299 */
typedef signed int FIXED30;

/* 296 */
struct SCRNVERTEX
{
  LONG x;
  LONG y;
  FIXED16 c;
  FIXED16 u;
  FIXED16 v;
  FIXED30 w;
};

/* 304 */
struct T_Wnd04BMt2
{
  SCRNVERTEX vertices[4];
  int raceIndex;
};

/* 302 */
struct T_Wnd04BMt1
{
  T_Wnd04BMt2 a[64];
  int num;
};

/* 221 */
struct __attribute__((packed)) T_Wnd04BM
{
  T_WndA2 a2;
  P_Wnd19BC pWnd19BC;
  P_BatDisplayItem pBatDisplayItem;
  P_Target pTarget2;
  char Unknown_B7;
  int cursorShape;
  __int16 Unknown_BC;
  T_Vector3D vectors1[100];
  T_Type16 someFloats[100];
  int Unknown_137E[100];
  T_Vector3D vectors2[100];
  T_HazeTable *pBatHazes;
  int batHazesNum;
  __int16 Unknown_19C6[100];
  int batfxNamesNum;
  T_GizmoValShape gvShape[79];
  T_GizmoValSfx gvSfx[79];
  int Unknown_1D0A;
  float Unknown_1D0E;
  int Unknown_1D12[3];
  T_Vector3D targetPosition;
  P_BatDisplayItem pBatDisplayItems;
  int batDisplayItemsNum;
  int Unknown_1D32;
  T_Wnd04BMt3 Unknown_1D36;
  T_Wnd04BMt3 Unknown_253A;
  T_Wnd04BMt3 Unknown_2D3E;
  T_Wnd04BMt1 Unknown_3542;
  T_Camera camera;
  T_Vector3D vector_4EDE;
  T_Matrix3x3D matrix_4EEA;
  float Unknown_4F0E;
  float Unknown_4F12;
  float Unknown_4F16;
  float Unknown_4F1A;
  int Unknown_4F1E;
  __int16 _xOffset;
  __int16 _yOffset;
  float Unknown_4F26;
  float Unknown_4F2A;
  UBYTE backgroundColor;
  int Unknown_4F2F;
  int Unknown_4F33;
  char Unknown_4F37;
  int Unknown_4F38[3];
  void *Unknown_4F44;
  int Unknown_4F48;
  int Unknown_4F4C[13];
  T_Vector3D vectors3[15];
  __int16 Unknown_5034;
  __int16 Unknown_5036[2];
  int Unknown_503A;
  int Unknown_503E;
  int Unknown_5042;
  int Unknown_5046;
  int Unknown_504A;
};

/* 317 */
struct __attribute__((packed)) T_BatDisplayItem
{
  T_Target target;
  __int16 shapeCacheIndex;
  int shapeNumber;
  int Unknown_B;
  int _scale;
  __int16 x0;
  __int16 y0;
  __int16 x1;
  __int16 y1;
  int Unknown_1B;
  int Unknown_1F;
  int Unknown_23;
  __int16 Unknown_27;
  WORD Unknown_29;
  __int16 Unknown_2B;
  __int16 Unknown_2D;
  float Unknown_2F;
  char Unknown_33;
  char Unknown_34;
};

/* 374 */
struct _FLIC_HEADER
{
  ULONG size;
  UWORD type;
  UWORD frames;
  UWORD width;
  UWORD height;
  UWORD depth;
  UWORD flags;
  ULONG speed;
  UWORD reserved1;
  ULONG created;
  ULONG creator;
  ULONG updated;
  ULONG updater;
  UWORD aspectx;
  UWORD aspecty;
  UBYTE reserved2[38];
  ULONG oframe1;
  ULONG oframe2;
  UBYTE reserved3[40];
};

/* 373 */
typedef _FLIC_HEADER FLIC_HEADER;

/* 370 */
struct __attribute__((packed)) T_SubtitleInstruction
{
  WORD frameNumber;
  WORD code;
  int param1;
  int param2;
};

/* 372 */
struct __attribute__((packed)) T_SubtitleText
{
  char *pText;
  int _margins;
};

/* 52 */
struct __attribute__((packed)) T_Type2
{
  T_CFile cfile;
  FLIC_HEADER flicHeader;
  void *pBuf_198;
  int dword19C;
  int Unknown_1A0;
  int Unknown_1A4;
  void *pBuf_1A8;
  void *pBuf_1AC;
  _DWORD dword1B0;
  _DWORD dword1B4;
  WINDOW window;
  PANE pane;
  int timerFrequency;
  void *pBuf2;
  void *pFlicBuffer;
  _DWORD dword1EC;
  void *pBuf3;
  int gap1F4;
  int Unknown_1F8;
  int Unknown_1FC;
  int Unknown_200;
  T_SubtitleInstruction subtInsts[128];
  _WORD Unknown_804;
  WORD subtInstNum;
  T_SubtitleText subtitleTexts[32];
  _WORD Unknown_908;
  T_Font font;
  __int16 Unknown_92A;
  __int16 Unknown_92C;
  void *pFontPalData;
  WORD fontPalStart;
  WORD fontPalCount;
  HTIMER timerHandle;
  int Unknown_93A;
  int skipFrame;
  _DWORD Unknown_942;
  int showInfo;
  WORD loopCount;
  WORD Unknown_94C;
  _DWORD Unknown_94E;
  _DWORD Unknown_952;
  WORD bufferMegs;
  WORD preloadMegs;
  WORD maxFrame;
  WORD readSizeKB;
};

/* 50 */
struct __attribute__((packed)) T_Wnd01FLIC
{
  T_WndA2 a2;
  T_Type2 t2;
};

/* 51 */
typedef T_Wnd01FLIC *P_Wnd01FLIC;

/* 53 */
typedef T_Type2 *P_Type2;

/* 54 */
struct T_Funcs
{
  int (*func1)(void);
  int (*func2)(void);
  int (*func3)(void);
  int (__cdecl *func4)(int x1, int y1, int x2, int y2, int);
  void *func5;
  int (__fastcall *func6)(_DWORD);
  int (__cdecl *func7)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
  int (__cdecl *func8)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
  int (__cdecl *func9)(_DWORD, _DWORD);
  int (__cdecl *func10)(_DWORD, _DWORD);
  void *func11;
  int (__cdecl *func12)(int, int x1, int y1, int x2, int y2);
  int (*func13)(void);
};

/* 55 */
enum MACRO_VFX_DLL
{
  DLLSRC_MEM = 0x1,
  DLLMEM_USER = 0x2,
  DLLMEM_ALLOC = 0x4,
};

/* 56 */
struct LX_header_struct
{
  ULONG lxbw;
  ULONG format_level;
  ULONG cpu_os_type;
  ULONG module_version;
  ULONG module_flags;
  ULONG module_num_of_pages;
  ULONG eip_object_num;
  ULONG eip;
  ULONG esp_object_num;
  ULONG esp;
  ULONG page_size;
  ULONG page_offset_shift;
  ULONG fixup_section_size;
  ULONG fixup_section_chksum;
  ULONG loader_section_size;
  ULONG loader_section_chksum;
  ULONG object_table_off;
  ULONG num_objects_in_module;
  ULONG object_page_table_off;
  ULONG object_iter_pages_off;
  ULONG resource_table_off;
  ULONG num_resource_table_entries;
  ULONG resident_name_table_off;
  ULONG entry_table_off;
  ULONG module_directives_off;
  ULONG num_module_directives;
  ULONG fixup_page_table_off;
  ULONG fixup_record_table_off;
  ULONG import_module_table_off;
  ULONG num_import_mod_entries;
  ULONG import_proc_table_off;
  ULONG per_page_chksum_off;
  ULONG data_pages_off;
  ULONG num_preload_pages;
  ULONG nonres_name_table_off;
  ULONG nonres_name_table_len;
  ULONG nonres_name_table_chksum;
  ULONG auto_ds_object_num;
  ULONG debug_info_off;
  ULONG debug_info_len;
  ULONG numinstance_preload;
  ULONG numinstance_demand;
  ULONG heapsize;
};

/* 57 */
typedef T_Palette *P_Palette;

/* 59 */
struct object_table_struct
{
  ULONG virtual_size;
  ULONG reloc_base_addr;
  ULONG object_flags;
  ULONG page_table_index;
  ULONG num_page_table_entries;
  ULONG reserved_space;
};

/* 60 */
typedef RGB *PRGB;

/* 61 */
struct object_page_table_struct
{
  ULONG page_data_offset;
  UWORD data_size;
  UWORD flags;
};

/* 71 */
struct VDI_CALL
{
  WORD AX;
  WORD BX;
  WORD CX;
  WORD DX;
  WORD SI;
  WORD DI;
};

/* 72 */
typedef T_Cache *P_Cache;

/* 76 */
struct __attribute__((packed)) IO_PARMS
{
  WORD IO;
  WORD IRQ;
  WORD DMA_8_bit;
  WORD DMA_16_bit;
  LONG IO_reserved[4];
};

/* 74 */
struct AIL_INI
{
  char device_name[128];
  char driver_name[128];
  IO_PARMS IO;
};

/* 77 */
#pragma pack(push, 1)
struct T_Mouse
{
  LONG initialized;
  LONG left;
  LONG right;
  LONG center;
  LONG leftClicked;
  LONG rightClicked;
  LONG centerClicked;
  LONG moved;
  LONG x;
  LONG y;
};
#pragma pack(pop)

/* 80 */
typedef ULONG REALFAR;

/* 78 */
struct AIL_DRIVER
{
  REALFAR seg;
  ULONG sel;
  void *buf;
  VDI_HDR *VHDR;
  LONG type;
  LONG initialized;
  LONG PM_ISR;
  HTIMER server;
  void (__cdecl *destructor)(void *);
  void *descriptor;
};

/* 81 */
struct VDI_HDR
{
  BYTE ID[8];
  ULONG driver_version;
  REALFAR common_IO_configurations;
  UWORD num_IO_configurations;
  REALFAR environment_string;
  IO_PARMS IO;
  WORD service_rate;
  UWORD busy;
  UWORD driver_num;
  UWORD this_ISR;
  REALFAR prev_ISR;
  BYTE scratch[128];
  BYTE dev_name[80];
};

/* 79 */
typedef T_WinEntry *P_WinEntry;

/* 82 */
#pragma pack(push, 1)
struct T_Keyboard
{
  int Pressed;
  int Alt;
  int Ctrl;
  int Shift;
  int CapsLock;
  int NumLock;
  int ScrollLock;
  int Insert;
  int i;
  UWORD ScanCode;
  UWORD ASCIIChar;
  WORD Flags;
  WORD k;
};
#pragma pack(pop)

/* 85 */
enum MACRO_VFX_BOOL
{
  FALSE = 0,
  TRUE = -1,
};

/* 87 */
struct __attribute__((packed)) T_Race
{
  UBYTE index;
  UBYTE species;
  UBYTE colorSet;
  BOOL extinct;
  P_Star homeStar;
  char z1[400];
  __int16 Unknown_19B;
  BYTE ability;
  int daysAfterAbilityUse;
  int Unknown_1A2[2];
  __int16 Unknown_1AA;
  __int16 Unknown_1AC;
  __int16 Unknown_1AE;
  WORD shipPatience;
  WORD attitudes[7];
  BYTE treaties[7];
  WORD negPlayerTurns;
  WORD declareWar;
  WORD acceptPeace;
  WORD proposePeace;
  WORD breakAlliance;
  WORD acceptAlliance;
  WORD proposeAlliance;
  WORD startAttitude;
  WORD bioPeriod;
  WORD bioMaxpositve;
  WORD bioMaxnegative;
  float bioSinX;
  float bioSinHalfX;
  float bioSinTwiceX;
  char Unknown_1E9;
  int Unknown_1EA;
};

/* 90 */
typedef MDI_DRIVER *HMDIDRIVER;

/* 95 */
typedef SEQUENCE *HSEQUENCE;

/* 144 */
typedef LONG (__cdecl *AILPREFIXCB)(HSEQUENCE seq, LONG log, LONG data);

/* 145 */
typedef void (__cdecl *AILTRIGGERCB)(HSEQUENCE seq, LONG log, LONG data);

/* 147 */
typedef void (__cdecl *AILSEQUENCECB)(HSEQUENCE seq);

/* 97 */
struct CTRL_LOG
{
  LONG program[16];
  LONG pitch_l[16];
  LONG pitch_h[16];
  LONG c_lock[16];
  LONG c_prot[16];
  LONG c_v_prot[16];
  LONG bank[16];
  LONG indirect[16];
  LONG callback[16];
  LONG mod[16];
  LONG vol[16];
  LONG pan[16];
  LONG exp[16];
  LONG sus[16];
  LONG reverb[16];
  LONG chorus[16];
  LONG bend_range[16];
};

/* 88 */
struct __attribute__((packed)) SEQUENCE
{
  HMDIDRIVER driver;
  ULONG status;
  void *TIMB;
  void *RBRN;
  void *EVNT;
  UBYTE *EVNT_ptr;
  UBYTE *ICA;
  AILPREFIXCB prefix_callback;
  AILTRIGGERCB trigger_callback;
  AILSEQUENCECB EOS;
  LONG loop_count;
  LONG interval_count;
  LONG interval_num;
  LONG volume;
  LONG volume_target;
  LONG volume_accum;
  LONG volume_period;
  LONG tempo_percent;
  LONG tempo_target;
  LONG tempo_accum;
  LONG tempo_period;
  LONG tempo_error;
  LONG beat_count;
  LONG measure_count;
  LONG time_numerator;
  LONG time_fraction;
  LONG beat_fraction;
  LONG time_per_beat;
  void *FOR_ptrs[4];
  LONG FOR_loop_count[4];
  LONG chan_map[16];
  CTRL_LOG shadow;
  LONG note_count;
  LONG note_chan[32];
  LONG note_num[32];
  LONG note_time[32];
  LONG user_data[8];
  LONG system_data[8];
};

/* 156 */
typedef LONG (__cdecl *AILEVENTCB)(HMDIDRIVER hmi, HSEQUENCE seq, LONG status, LONG data_1, LONG data_2);

/* 157 */
typedef LONG (__cdecl *AILTIMBRECB)(HMDIDRIVER hmi, LONG bank, LONG patch);

/* 118 */
struct MDI_DRIVER
{
  AIL_DRIVER *drvr;
  MDI_DDT *DDT;
  MDI_DST *DST;
  HTIMER timer;
  LONG interval_time;
  LONG disable;
  SEQUENCE *sequences;
  LONG n_sequences;
  LONG lock[16];
  HSEQUENCE locker[16];
  HSEQUENCE owner[16];
  HSEQUENCE user[16];
  LONG state[16];
  LONG notes[16];
  AILEVENTCB event_trap;
  AILTIMBRECB timbre_trap;
  LONG message_count;
  LONG offset;
  LONG system_data[8];
};

/* 91 */
struct MDI_DDT
{
  REALFAR library_environment;
  REALFAR GTL_suffix;
  UWORD num_voices;
  UWORD max_melodic_channel;
  UWORD min_melodic_channel;
  UWORD percussion_channel;
};

/* 93 */
struct MDI_DST
{
  BYTE library_directory[128];
  BYTE GTL_filename[128];
  BYTE MIDI_data[512];
};

/* 379 */
struct __attribute__((packed)) T_RacePowerStats
{
  __int16 ranking;
  __int16 shipsNum;
  __int16 planetsNum;
};

/* 160 */
struct __attribute__((packed)) T_Sector
{
  BYTE n;
  T_Vector3D v;
};

/* 109 */
struct __attribute__((packed)) T_ConnectionGroup
{
  P_Star stars[100];
  WORD starsNum;
  T_Vector3D centroidPosition;
};

/* 89 */
struct __attribute__((packed)) T_Game
{
  int day;
  __int16 _combatSearchIndex;
  T_Race races[7];
  WORD racesNum;
  T_RacePowerStats racePowerStats[7];
  BYTE atmosphere;
  T_Star stars[100];
  WORD starsNum;
  T_Lane lanes[148];
  WORD lanesNum;
  T_Square squares[20000];
  WORD squaresNum;
  T_Planet planets[500];
  WORD planetsNum;
  T_Ship ships[107];
  WORD shipsNum;
  T_Sector sectors[9];
  WORD sectorsNum;
  P_Star pCurStar;
  P_Planet pCurPlanet;
  int endingScore;
  BYTE endingCondition;
  T_ConnectionGroup connectionGroups[24];
  WORD connectionGroupsNum;
  WORD _averageHomeStarDistance;
  WORD averageStarsPerGroup;
  char Unknown_32DD7[4];
  UBYTE starDistanceMatrix[100][100];
  int starsControlled;
};

/* 92 */
typedef T_Game *P_Game;

/* 94 */
typedef T_Race *P_Race;

/* 96 */
typedef void *CALLBACK;

/* 99 */
struct SHAPEHEADER
{
  ULONG bounds;
  ULONG origin;
  ULONG xmin;
  ULONG ymin;
  ULONG xmax;
  ULONG ymax;
};

/* 100 */
typedef SHAPEHEADER *PSHAPEHEADER;

/* 101 */
struct __attribute__((packed)) GIFDATA
{
  ULONG nextcode;
  ULONG nextlimit;
  ULONG xloc;
  ULONG yloc;
  ULONG bufct;
  ULONG rem;
  ULONG remct;
  ULONG reqct;
  ULONG rowcnt;
  ULONG imagewide;
  ULONG imagedepth;
  UBYTE interlaced;
  UBYTE pass;
};

/* 102 */
typedef GIFDATA *PGIFDATA;

/* 103 */
struct __attribute__((packed)) PCX
{
  UBYTE manufacturer;
  UBYTE version;
  UBYTE encoding;
  UBYTE bits_per_pixel;
  UWORD xmin;
  UWORD ymin;
  UWORD xmax;
  UWORD ymax;
  UWORD hres;
  UWORD vres;
  UBYTE palette[48];
  UBYTE reserved;
  UBYTE color_planes;
  UWORD BYTEs_per_line;
  UWORD palette_type;
  UBYTE filler[58];
};

/* 104 */
typedef PCX *PPCX;

/* 105 */
typedef PANE *PPANE;

/* 106 */
struct __attribute__((packed)) VERTEX2D
{
  ULONG vx;
  ULONG vy;
  ULONG vc;
  ULONG u;
  ULONG v;
};

/* 107 */
typedef VERTEX2D *PVERTEX2D;

/* 108 */
struct POINT
{
  LONG x;
  LONG y;
};

/* 110 */
struct RECT
{
  LONG x0;
  LONG y0;
  LONG x1;
  LONG y1;
};

/* 112 */
enum MACRO_VFX_PL
{
  PL_FREE = 0,
  PL_VALID = 1,
  PL_CONTAINED = 2,
};

/* 113 */
enum MACRO_VFX_PS
{
  PS_NOWRAP = 0,
  PS_WRAP = 1,
  NO_COLOR = -1,
};

/* 114 */
struct RMI_STRUCT
{
  LONG edi;
  LONG esi;
  LONG ebp;
  LONG reserved;
  LONG ebx;
  LONG edx;
  LONG ecx;
  LONG eax;
  WORD flags;
  WORD es;
  WORD ds;
  WORD fs;
  WORD gs;
  WORD ip;
  WORD cs;
  WORD sp;
  WORD ss;
};

/* 115 */
struct T_SavBlock0Header
{
  int day;
  int races;
  int _playerRaceIndex;
  int z1[7];
  int z2[7];
  int z3[7];
  int playerShipsNum;
  int playerPlanetsNum;
  int playerTechsNum;
  int Unknown_6C[2];
};

/* 116 */
enum MACRO_AIL_PREF
{
  DIG_SERVICE_RATE = 0x0,
  DIG_HARDWARE_SAMPLE_RATE = 0x1,
  DIG_DMA_RESERVE = 0x2,
  DIG_LATENCY = 0x3,
  DIG_MIXER_CHANNELS = 0x4,
  DIG_DEFAULT_VOLUME = 0x5,
  DIG_RESAMPLING_TOLERANCE = 0x6,
  DIG_USE_STEREO = 0x7,
  DIG_USE_16_BITS = 0x8,
  DIG_ALLOW_16_BIT_DMA = 0x9,
  MDI_SERVICE_RATE = 0xA,
  MDI_SEQUENCES = 0xB,
  MDI_DEFAULT_VOLUME = 0xC,
  MDI_QUANT_ADVANCE = 0xD,
  MDI_ALLOW_LOOP_BRANCHING = 0xE,
  MDI_DEFAULT_BEND_RANGE = 0xF,
  AIL_SCAN_FOR_HARDWARE = 0x10,
  AIL_ALLOW_VDM_EXECUTION = 0x11,
  N_PREFS = 0x12,
};

/* 117 */
enum MACRO_VFX_FILE_ERRS
{
  NO_ERROR = 0,
  IO_ERROR = 1,
  OUT_OF_MEMORY = 2,
  FILE_NOT_FOUND = 3,
  CANT_WRITE_FILE = 4,
  CANT_READ_FILE = 5,
  DISK_FULL = 6,
};

/* 119 */
enum MACRO_NULL
{
  NULL = 0,
};

/* 120 */
struct DIG_DRIVER
{
  AIL_DRIVER *drvr;
  DIG_DDT *DDT;
  DIG_DST *DST;
  HTIMER timer;
  LONG half_buffer_size;
  LONG DMA_rate;
  LONG hw_format;
  ULONG hw_mode_flags;
  REALFAR DMA_seg;
  ULONG DMA_sel;
  void *DMA_buf;
  void *DMA[2];
  WORD *buffer_flag;
  LONG last_buffer;
  LONG channels_per_sample;
  LONG bytes_per_channel;
  LONG channels_per_buffer;
  LONG samples_per_buffer;
  LONG build_size;
  LONG *build_buffer;
  LONG playing;
  LONG quiet;
  SAMPLE *samples;
  LONG n_samples;
  LONG n_active_samples;
  LONG master_volume;
  LONG system_data[8];
};

/* 124 */
struct DIG_MODE
{
  UWORD minimum_physical_sample_rate;
  UWORD nominal_physical_sample_rate;
  UWORD maximum_physical_sample_rate;
  UWORD minimum_DMA_half_buffer_size;
  UWORD maximum_DMA_half_buffer_size;
  ULONG flags;
};

/* 122 */
struct DIG_DDT
{
  UBYTE format_supported[16];
  DIG_MODE format_data[16];
};

/* 126 */
struct DIG_DST
{
  REALFAR DMA_buffer_A;
  REALFAR DMA_buffer_B;
  WORD active_buffer;
};

/* 138 */
typedef void (__cdecl *AILSAMPLECB)(HSAMPLE sample);

/* 128 */
struct SAMPLE
{
  DIG_DRIVER *driver;
  ULONG status;
  void *start[2];
  ULONG len[2];
  ULONG pos[2];
  ULONG done[2];
  LONG current_buffer;
  LONG last_buffer;
  LONG loop_count;
  LONG format;
  ULONG flags;
  LONG playback_rate;
  LONG volume;
  LONG pan;
  LONG vol_scale[2][256];
  AILSAMPLECB SOB;
  AILSAMPLECB EOB;
  AILSAMPLECB EOS;
  LONG user_data[8];
  LONG system_data[8];
};

/* 121 */
struct T_SavBlock1Sizes
{
  int sizeResTree;
  int sizeStar;
  int sizePlanet;
  int sizeRace;
  int sizeLane;
  int sizeConnection;
  int sizeSector;
  int sizeGame;
};

/* 125 */
typedef T_ConnectionGroup *P_ConnectionGroup;

/* 127 */
struct __attribute__((packed)) T_Gizmo
{
  char name[28];
  char z[22];
  BYTE cat;
  UWORD flags;
  UBYTE resReq;
  int power;
  int range;
  int level;
  int numUses;
  int industry;
  int special1;
  int special2;
  int weaponDamage;
  int shieldStrength;
  int Unknown_5A;
  int driveMaxDistance;
  int scannerRangePerTurn;
  int generatorPower;
};

/* 129 */
typedef T_Gizmo *P_Gizmo;

/* 130 */
typedef signed __int8 int8_t;

/* 131 */
typedef __int16 int16_t;

/* 132 */
typedef int int32_t;

/* 133 */
typedef unsigned __int8 uint8_t;

/* 134 */
typedef unsigned __int16 uint16_t;

/* 135 */
typedef unsigned int uint32_t;

/* 136 */
typedef int _W64;

/* 137 */
typedef unsigned int uintptr_t;

/* 139 */
struct SNDSAMPLE
{
  DIG_DRIVER *driver;
  uint32_t status;
  void *start[2];
  uint32_t len[2];
  uint32_t pos[2];
  uint32_t done[2];
  int32_t current_buffer;
  int32_t last_buffer;
  int32_t loop_count;
  int32_t format;
  uint32_t flags;
  int32_t playback_rate;
  int32_t volume;
  int32_t pan;
  int32_t vol_scale[2][256];
  AILSAMPLECB SOB;
  AILSAMPLECB EOB;
  AILSAMPLECB EOS;
  uintptr_t user_data[8];
  uintptr_t system_data[8];
};

/* 140 */
enum MACRO_AIL_SMP
{
  SMP_FREE = 0x1,
  SMP_DONE = 0x2,
  SMP_PLAYING = 0x4,
  SMP_STOPPED = 0x8,
};

/* 141 */
enum MACRO_AIL_FUN
{
  DRV_INIT = 0x300,
  DRV_GET_INFO = 0x301,
  DRV_SERVE = 0x302,
  DRV_PARSE_ENV = 0x303,
  DRV_VERIFY_IO = 0x304,
  DRV_INIT_DEV = 0x305,
  DRV_SHUTDOWN_DEV = 0x306,
  DIG_HW_VOLUME = 0x400,
  DIG_START_P_CMD = 0x401,
  DIG_STOP_P_REQ = 0x402,
  DIG_START_R_CMD = 0x403,
  DIG_STOP_R_REQ = 0x404,
  DIG_VSE = 0x405,
  MDI_HW_VOLUME = 0x500,
  MDI_INIT_INS_MGR = 0x501,
  MDI_MIDI_XMIT = 0x502,
  MDI_INSTALL_T_SET = 0x503,
  MDI_GET_T_STATUS = 0x504,
  MDI_PROT_UNPROT_T = 0x505,
  MDI_VSE = 0x506,
};

/* 142 */
enum MACRO_AIL_DIG_F
{
  DIG_F_MONO_8 = 0,
  DIG_F_MONO_16 = 1,
  DIG_F_STEREO_8 = 2,
  DIG_F_STEREO_16 = 3,
};

/* 143 */
typedef void (__cdecl *AILTIMERCB)(ULONG user);

/* 146 */
typedef void (__cdecl *AILBEATCB)(HMDIDRIVER hmi, HSEQUENCE seq, LONG beat, LONG measure);

/* 148 */
typedef CTRL_LOG MDI_CTRL_LOG;

/* 149 */
typedef SEQUENCE SNDSEQUENCE;

/* 150 */
enum MACRO_AIL_SEQ
{
  SEQ_FREE = 0x1,
  SEQ_DONE = 0x2,
  SEQ_PLAYING = 0x4,
  SEQ_STOPPED = 0x8,
};

/* 151 */
enum MACRO_AIL_EV
{
  EV_NOTE_ON = 0x90,
  EV_POLY_PRESS = 0xA0,
  EV_CONTROL = 0xB0,
  EV_PROGRAM = 0xC0,
  EV_CHAN_PRESS = 0xD0,
  EV_PITCH = 0xE0,
  EV_SYSEX = 0xF0,
  EV_ESC = 0xF7,
  EV_META = 0xFF,
};

/* 152 */
enum MACRO_AIL_MIDI_CTRl1
{
  SYSEX_BYTE = 0x69,
  PB_RANGE = 0x6A,
  CHAN_MUTE = 0x6B,
  CALLBACK_PFX = 0x6C,
  SEQ_BRANCH = 0x6D,
  CHAN_LOCK = 0x6E,
  CHAN_PROTECT = 0x6F,
  VOICE_PROTECT = 0x70,
  TIMBRE_PROTECT = 0x71,
  PATCH_BANK_SEL = 0x72,
  INDIRECT_C_PFX = 0x73,
  FOR_LOOP = 0x74,
  NEXT_LOOP = 0x75,
  CLEAR_BEAT_BAR = 0x76,
  CALLBACK_TRIG = 0x77,
  SEQ_INDEX = 0x78,
};

/* 153 */
enum MACRO_AIL_MIDI_CTRL2
{
  GM_BANK_MSB = 0x0,
  MODULATION = 0x1,
  DATA_MSB = 0x6,
  PART_VOLUME = 0x7,
  PANPOT = 0xA,
  EXPRESSION = 0xB,
  GM_BANK_LSB = 0x20,
  DATA_LSB = 0x26,
  SUSTAIN = 0x40,
  REVERB = 0x5B,
  CHORUS = 0x5D,
  RPN_LSB = 0x64,
  RPN_MSB = 0x65,
  RESET_ALL_CTRLS = 0x79,
  ALL_NOTES_OFF = 0x7B,
};

/* 154 */
typedef IO_PARMS SNDCARD_IO_PARMS;

/* 155 */
enum MACRO_AIL3DIG
{
  AIL3DIG = 0,
  AIL3MDI = 1,
};

/* 164 */
struct T_OpenedFile
{
  char fname[24];
  int fpos;
};

/* 158 */
struct __attribute__((packed)) T_SSystem
{
  char mdiFileName[255];
  char digFileName[255];
  char Unknown_1FE[9];
  int MDI_installed;
  int DIG_installed;
  int AIL_started;
  int soundEffectsOff;
  int _notstarted2;
  MDI_DRIVER *mdidrv;
  DIG_DRIVER *digdrv;
  int a;
  int playing;
  int musicOff;
  int z2;
  int Unknown_233;
  char bufNum;
  void *digitalMusicBuf1;
  void *digitalMusicBuf2;
  T_CFile cfile;
  SAMPLE *smpl[8];
  WORD smplCnt;
  T_OpenedFile files[32];
  WORD tracks;
  __int16 current;
  BYTE volume;
  BYTE volume2;
  __int16 Unknown_700;
  __int16 Unknown_702[600];
  __int16 Unknown_BB2;
  char Unknown_BB4[132];
  int Unknown_C38[2];
  int Unknown_C40;
  int Unknown_C44[3];
  int Unknown_C50[3];
  int Unknown_C5C[3];
  char Unknown_C68[64];
  __int16 Unknown_CA8;
  __int16 Unknown_CAA;
};

/* 159 */
typedef T_SSystem *P_SSystem;

/* 161 */
typedef T_Sector *P_V3D;

/* 163 */
struct __attribute__((packed)) T_Type09s
{
  T_ConnectionGroup a[24];
};

/* 162 */
struct __attribute__((packed)) T_Type10
{
  T_Type09s t09s;
  WORD num;
};

/* 165 */
enum MACRO_S
{
  S_IFMT = 0xF000,
  S_IFDIR = 0x4000,
  S_IFCHR = 0x2000,
  S_IFREG = 0x8000,
  S_IRWXU = 0x1C0,
  S_IRUSR = 0x100,
  S_IWUSR = 0x80,
  S_IXUSR = 0x40,
  S_IREAD = 0x100,
  S_IWRITE = 0x80,
  S_IEXEC = 0x40,
  S_IRWXG = 0x38,
  S_IRGRP = 0x20,
  S_IWGRP = 0x10,
  S_IXGRP = 0x8,
  S_IRWXO = 0x7,
  S_IROTH = 0x4,
  S_IWOTH = 0x2,
  S_IXOTH = 0x1,
  S_ISUID = 0x800,
  S_ISGID = 0x400,
  S_ISVTX = 0x200,
  S_IREADWRITE = 0x180,
};

/* 166 */
enum MACRO_SEEK
{
  SEEK_SET = 0,
  SEEK_CUR = 1,
  SEEK_END = 2,
};

/* 169 */
struct __attribute__((packed)) T_Type09c
{
  float c;
  float e;
  float f;
};

/* 173 */
struct __attribute__((packed)) T_Tech
{
  char name[60];
  UWORD cost;
  UBYTE preq[5];
  UBYTE next[5];
  BYTE knownToRace;
  BYTE Unknown_49;
  UBYTE type;
};

/* 175 */
struct __attribute__((packed)) T_ResCurrent
{
  UWORD project[7];
  UWORD progress[7];
};

/* 171 */
struct __attribute__((packed)) T_Research
{
  UWORD num;
  T_Tech techs[100];
  T_ResCurrent current;
  int b;
  int allTechForShipReported;
};

/* 172 */
typedef T_Research *P_Research;

/* 174 */
typedef T_Tech *P_Tech;

/* 181 */
struct __attribute__((packed)) T_PlanetSurface
{
  UBYTE black;
  UBYTE red;
  UBYTE green;
  UBYTE blue;
};

/* 182 */
struct __attribute__((packed)) T_PlanetRoom
{
  UBYTE column[15];
};

/* 320 */
struct __attribute__((packed)) T_PlanetRooms
{
  T_PlanetRoom sizes[5];
  UBYTE r;
};

/* 183 */
struct __attribute__((packed)) T_PlanetCfg
{
  int txtLoaded;
  T_PlanetRooms offsets;
  T_PlanetRooms squares;
  T_PlanetSurface surfaces[11];
};

/* 184 */
struct __attribute__((packed)) T_PlanetItem
{
  BYTE ind;
  UBYTE res;
  UBYTE pros;
  BYTE mpop;
  BYTE upop;
  UBYTE resReq;
  UWORD flags;
  UWORD cost;
  char name[30];
};

/* 185 */
struct __attribute__((packed)) T_PlanetItems
{
  UWORD surfaceItemsNum;
  UWORD orbitalItemsNum;
  T_PlanetItem item[39];
};

/* 186 */
enum MACRO_ASCEND_PI_FLAG
{
  ASCEND_PI_FLAG_BUILD_ON_BLACK = 0x1,
  ASCEND_PI_FLAG_MASK1 = 0x2,
  ASCEND_PI_FLAG_ATTACK = 0x4,
  ASCEND_PI_FLAG_DEFENSE = 0x8,
  ASCEND_PI_FLAG_MASK4 = 0x10,
  ASCEND_PI_FLAG_PROJECT = 0x20,
  ASCEND_PI_FLAG_MASK6 = 0x40,
};

/* 188 */
typedef T_Gizmo T_Gizmos[76];

/* 189 */
enum MACRO_ASCEND_GIZMO_CAT
{
  ASCEND_GIZMO_CAT_WEAPON = 0x0,
  ASCEND_GIZMO_CAT_SHIELD = 0x1,
  ASCEND_GIZMO_CAT_DRIVE = 0x2,
  ASCEND_GIZMO_CAT_SCANNER = 0x3,
  ASCEND_GIZMO_CAT_GENERATOR = 0x4,
  ASCEND_GIZMO_CAT_SPECIAL = 0x5,
};

/* 192 */
enum MACRO_ASCEND_PLANET_TYPE
{
  ASCEND_PLANET_TYPE_HUSK = 0x0,
  ASCEND_PLANET_TYPE_PRIMORDIAL = 0x1,
  ASCEND_PLANET_TYPE_CONGENIAL = 0x2,
  ASCEND_PLANET_TYPE_EDEN = 0x3,
  ASCEND_PLANET_TYPE_MINERAL = 0x4,
  ASCEND_PLANET_TYPE_SUPERMINERAL = 0x5,
  ASCEND_PLANET_TYPE_CHAPEL = 0x6,
  ASCEND_PLANET_TYPE_CATHEDRAL = 0x7,
  ASCEND_PLANET_TYPE_SPECIAL = 0x8,
  ASCEND_PLANET_TYPE_TYCOON = 0x9,
  ASCEND_PLANET_TYPE_CORNUCOPIA = 0xA,
};

/* 193 */
enum MACRO_ASCEND_PLANET_SIZE
{
  ASCEND_PLANET_SIZE_TINY = 0x0,
  ASCEND_PLANET_SIZE_SMALL = 0x1,
  ASCEND_PLANET_SIZE_MEDIUM = 0x2,
  ASCEND_PLANET_SIZE_LARGE = 0x3,
  ASCEND_PLANET_SIZE_ENORMOUS = 0x4,
};

/* 197 */
struct __attribute__((packed)) T_Wnd12IW
{
  T_WndA2 super;
  P_Wnd10LB pIntelListBox;
};

/* 198 */
typedef T_Wnd12IW *P_Wnd12IW;

/* 199 */
struct __attribute__((packed)) T_Wnd11LW
{
  T_WndA2 a;
  char Unknown[3893];
};

/* 200 */
typedef T_Wnd11LW *P_Wnd11LW;

/* 201 */
struct __attribute__((packed)) T_Wnd07PW
{
  T_WndA2 super;
  BYTE planetItemIndex;
  UWORD squareIndex1;
  UWORD squareIndex2;
  UWORD squareIndex3;
  T_Target Unknown_B2[39];
  WORD planalShpCacheIndex[11];
  char Unknown_18B;
};

/* 202 */
typedef T_Wnd07PW *P_Wnd07PW;

/* 203 */
struct __attribute__((packed)) T_Wnd06RSW
{
  T_WndA2 a;
  WORD Unknown_AB;
  char Unknown_AD[4];
};

/* 204 */
typedef T_Wnd06RSW *P_Wnd06RSW;

/* 205 */
struct __attribute__((packed)) T_Wnd09RW
{
  T_WndA2 a;
  T_Camera camera;
  T_Vector3D vectors[100];
  WORD Unknown_5F3[100];
  WORD Unknown_6BB[100];
  WORD Unknown_783[100];
  WORD Unknown_84B[100];
  WORD Unknown_913[100];
  __int16 Unknown_9DB;
};

/* 206 */
typedef T_Wnd09RW *P_Wnd9RW;

/* 207 */
struct __attribute__((packed)) T_Wnd14PSW
{
  T_WndA2 a;
  UWORD squareIndex;
};

/* 208 */
typedef T_Wnd14PSW *P_Wnd14PSW;

/* 209 */
struct __attribute__((packed)) T_Wnd15NT
{
  T_WndA2 a;
  int Unknown;
};

/* 210 */
typedef T_Wnd15NT *P_Wnd15NT;

/* 215 */
struct __attribute__((packed)) T_TypeA11
{
  T_WndA2 a;
  P_Wnd10LB pListBox;
};

/* 211 */
struct __attribute__((packed)) T_Wnd16SW
{
  T_TypeA11 a;
  char Unknown_AF[2];
};

/* 212 */
typedef T_Wnd16SW *P_Wnd16SW;

/* 213 */
struct __attribute__((packed)) T_Wnd17FW
{
  T_TypeA11 a11;
  __int16 Unknown_AF;
};

/* 214 */
typedef T_Wnd17FW *P_Wnd17FW;

/* 216 */
typedef T_TypeA11 *P_TypeA11;

/* 329 */
typedef char T_Text200[200];

/* 217 */
struct __attribute__((packed)) T_Wnd18NG
{
  T_WndA2 a;
  P_Wnd10LB pListBox;
  T_Text200 *speciesDescriptions;
  __int16 Unknown_B3;
  __int16 Unknown_B5;
  __int16 starDensity;
  __int16 Unknown_B9;
  __int16 atmosphere;
};

/* 218 */
typedef T_Wnd18NG *P_Wnd18NG;

/* 219 */
struct __attribute__((packed)) T_Wnd22AW
{
  T_Wnd20HW super;
};

/* 220 */
typedef T_Wnd22AW *P_Wnd22AW;

/* 223 */
struct __attribute__((packed)) T_Wnd08SW
{
  T_WndA2 a;
  P_Ship pShip;
  int Unknown_AF[2];
  int Unknown_B7;
  BYTE selectedGizmoIndex;
  char Unknown_BC;
  int Unknown_BD;
  int Unknown_C1;
  P_Wnd10LB pWnd10LB;
  int Unknown_C9;
  T_Ship Ship;
  int Unknown_D1;
  int Unknown_233;
};

/* 224 */
typedef T_Wnd08SW *P_Wnd08SW;

/* 225 */
typedef void (*pFUNVOIDVOID)(void);

/* 226 */
typedef int (__fastcall *pFUNINTUNSIGNED)(unsigned int);

/* 227 */
typedef void (__fastcall *pFUNpVOIDVOID)(void *);

/* 229 */
typedef void (__fastcall __spoils<> *pFUNctor)(void *self);

/* 230 */
typedef void (__fastcall *pFUNctorV)(void *, unsigned int);

/* 231 */
typedef void (__fastcall *pFUNcopy)(void *tgt, void *src);

/* 232 */
typedef void (__fastcall *pFUNcopyV)(void *, unsigned int, void *);

/* 233 */
#pragma pack(push, 1)
struct rt_type_sig_clss
{
  __int8 hdr;
  pFUNctor ctor;
  pFUNcopy copyctor;
  pFUNdtor dtor;
  int size;
  char z[3];
};
#pragma pack(pop)

/* 234 */
typedef T_Sector *P_Sector;

/* 235 */
typedef void (*__type_rtn)(void);

/* 236 */
#pragma pack(push, 1)
struct rt_init
{
  BYTE rtn_type;
  BYTE priority;
  __type_rtn rtn;
};
#pragma pack(pop)

/* 237 */
#pragma pack(push, 1)
struct rt_arr_register
{
  rt_arr_register *prev_reg;
  int b;
  int counter;
  void *array;
  int e;
  rt_type_sig_clss *sig;
  pFUNdtor dtor;
  int h;
};
#pragma pack(pop)

/* 241 */
typedef T_Camera *P_Camera;

/* 242 */
typedef T_Vector3D *P_Vector3D;

/* 244 */
typedef T_Type16 *P_Type16;

/* 251 */
typedef T_PlanetItem *P_PlanetItem;

/* 253 */
typedef T_WinEvent *P_WinEvent;

/* 261 */
enum MACRO_ASCEND_LOCATION_TYPE
{
  ASCEND_LOCATION_TYPE_VOID = 0x0,
  ASCEND_LOCATION_TYPE_SHIPYARD = 0x1,
  ASCEND_LOCATION_TYPE_SHIPDOCK = 0x2,
  ASCEND_LOCATION_TYPE_ORBIT = 0x3,
  ASCEND_LOCATION_TYPE_SYSTEM = 0x4,
  ASCEND_LOCATION_TYPE_STARLANE = 0x5,
  ASCEND_LOCATION_TYPE_BOGUS = 0x6,
};

/* 262 */
enum MACRO_ASCEND_SA
{
  ASCEND_SA_SUPER_MARINES = 0x0,
  ASCEND_SA_DOUBLE_HULL = 0x1,
  ASCEND_SA_BUILD_ON_BLACK = 0x2,
  ASCEND_SA_KNOW_HOME_WORLDS = 0x3,
  ASCEND_SA_KNOW_RACES = 0x4,
  ASCEND_SA_HEAL_SHIPS = 0x5,
  ASCEND_SA_FORCE_PEACE = 0x6,
  ASCEND_SA_DOUBLE_POWER = 0x7,
  ASCEND_SA_REPEL_ALIEN_SHIPS = 0x8,
  ASCEND_SA_SAP_ALIEN_POWER = 0x9,
  ASCEND_SA_CORNUCOPIA = 0xA,
  ASCEND_SA_BUMP_SHIPS_INLANES = 0xB,
  ASCEND_SA_STEAL_RESEARCH = 0xC,
  ASCEND_SA_SHIELD_PLANETS = 0xD,
  ASCEND_SA_MORE_MAX_POP = 0xE,
  ASCEND_SA_KNOW_STAR_LANES = 0xF,
  ASCEND_SA_BLOCK_STAR_LANES = 0x10,
  ASCEND_SA_CAUSE_WAR = 0x11,
  ASCEND_SA_FAST_LANE_TRAVEL = 0x12,
  ASCEND_SA_FREE_RESEARCH = 0x13,
  ASCEND_SA_INDUSTRY_BOOST = 0x14,
};

/* 267 */
enum MACRO_ASCEND_EP
{
  ASCEND_EP_00_NEW_DISCOVERY = 0x0,
  ASCEND_EP_01_CONSTRUCTION_COMPLETE = 0x1,
  ASCEND_EP_02_WOULD_LIKE_TO_SPEAK = 0x2,
  ASCEND_EP_SHIPARRIVE = 0x3,
  ASCEND_EP_FINDRACE = 0x4,
  ASCEND_EP_HOSTILESHIP = 0x5,
  ASCEND_EP_HOSTILEPLAN = 0x6,
  ASCEND_EP_OTHERWAR = 0x7,
  ASCEND_EP_RACEFINDUS = 0x8,
  ASCEND_EP_BADSHIPENTERS = 0x9,
  ASCEND_EP_SPECIESEXTINCT = 0xA,
  ASCEND_EP_SCRAPNEWESTSHIP = 0xB,
  ASCEND_EP_SHIPDESTROYED = 0xC,
  ASCEND_EP_COLONYINVADED = 0xD,
  ASCEND_EP_14 = 0xE,
  ASCEND_EP_15_HAS_FREE_POPULATION = 0xF,
  ASCEND_EP_16_ENTERED_ORBIT = 0x10,
  ASCEND_EP_17_SHIP_COMPLETE = 0x11,
  ASCEND_EP_18_REFIT_COMPLETE = 0x12,
  ASCEND_EP_19_REMAINING_MOVES = 0x13,
  ASCEND_EP_20_DISCOVERED_SYSTEM = 0x14,
  ASCEND_EP_21_ALL_TECH_FOR_SHIP = 0x15,
  ASCEND_EP_22_XENO_COMPLETE = 0x16,
  ASCEND_EP_23_LANE_TRANSMISION = 0x17,
  ASCEND_EP_ABILITYPTS = 0x18,
  ASCEND_EP_25_FIRST_LAB = 0x19,
};

/* 269 */
typedef T_Matrix3x3D *P_Matrix3x3D;

/* 270 */
enum MACRO_ASCEND_PI
{
  ASCEND_PI_00_FACTORY = 0x0,
  ASCEND_PI_01_AGRIPLOT = 0x1,
  ASCEND_PI_02_LABORATORY = 0x2,
  ASCEND_PI_03_HABITAT = 0x3,
  ASCEND_PI_04_METROPLEX = 0x4,
  ASCEND_PI_05_COLONY_BASE = 0x5,
  ASCEND_PI_06_INDUSTRIAL_MEGAFACILITY = 0x6,
  ASCEND_PI_07_ARTIFICIAL_HYDROPONIFER = 0x7,
  ASCEND_PI_08_RESEARCH_CAMPUS = 0x8,
  ASCEND_PI_09_LOGIC_FACTORY = 0x9,
  ASCEND_PI_10_ENGINEERING_RETREAT = 0xA,
  ASCEND_PI_11_SURFACE_CLOAKER = 0xB,
  ASCEND_PI_12_HYPERPOWER_PLANT = 0xC,
  ASCEND_PI_13_FERTILIZATION_PLANT = 0xD,
  ASCEND_PI_14_INTERNET = 0xE,
  ASCEND_PI_15_CLONING_PLANT = 0xF,
  ASCEND_PI_16_OBSERVATION_INSTALLATION = 0x10,
  ASCEND_PI_17_TRACTOR_BEAM = 0x11,
  ASCEND_PI_18_SURFACE_SHIELD = 0x12,
  ASCEND_PI_19_SURFACE_MEGA_SHIELD = 0x13,
  ASCEND_PI_20_OUTPOST = 0x14,
  ASCEND_PI_21_TRANSPORT_TUBES = 0x15,
  ASCEND_PI_22_SHIPYARD = 0x16,
  ASCEND_PI_23_SHIP = 0x17,
  ASCEND_PI_24_ORBITAL_DOCKS = 0x18,
  ASCEND_PI_25_ORBITAL_CLOAKER = 0x19,
  ASCEND_PI_26_ORBITAL_SHIELD = 0x1A,
  ASCEND_PI_27_ORBITAL_MEGA_SHIELD = 0x1B,
  ASCEND_PI_28_ORBITAL_MISSILE_BASE = 0x1C,
  ASCEND_PI_29_SHORT_RANGE_ORBITAL_WHOPPER = 0x1D,
  ASCEND_PI_30_LONG_RANGE_ORBITAL_WHOPPER = 0x1E,
  ASCEND_PI_31_ALIEN_HOSPITALITY = 0x1F,
  ASCEND_PI_32_INTERSTELLAR_TRUCKING = 0x20,
  ASCEND_PI_33_ENDLESS_PARTY = 0x21,
  ASCEND_PI_34_SCIENTIST_TAKEOVER = 0x22,
  ASCEND_PI_35_AUTOMATION = 0x23,
  ASCEND_PI_36_TERRAFORMING = 0x24,
  ASCEND_PI_37_LUSH_GROWTH_BOMB = 0x25,
  ASCEND_PI_38_XENO_ARCHEOLOGICAL_DIG = 0x26,
  ASCEND_PI_39_END = 0x27,
};

/* 273 */
enum MACRO_ASCEND_SQUARE_COLOR
{
  ASCEND_SQUARE_COLOR_BLACK = 0x0,
  ASCEND_SQUARE_COLOR_WHITE = 0x1,
  ASCEND_SQUARE_COLOR_RED = 0x2,
  ASCEND_SQUARE_COLOR_GREEN = 0x3,
  ASCEND_SQUARE_COLOR_BLUE = 0x4,
  ASCEND_SQUARE_XENO_RUINS = 0x8,
};

/* 274 */
enum MACRO_ASCEND_SQUARE_FLAGS
{
  ASCEND_SQUARE_FLAGS_COMPLETE = 0x1,
  ASCEND_SQUARE_FLAGS_AUTOMATED = 0x2,
};

/* 275 */
typedef char T_Name12[12];

/* 276 */
typedef char T_Name10[10];

/* 277 */
enum MACRO_ASCEND_ATMOSPHERE
{
  ASCEND_ATMOSPHERE_PEACEFUL = 0x0,
  ASCEND_ATMOSPHERE_NEUTRAL = 0x1,
  ASCEND_ATMOSPHERE_HOSTILE = 0x2,
};

/* 278 */
enum MACRO_ASCEND_TREATY
{
  ASCEND_TREATY_UNKNOWN = 0x0,
  ASCEND_TREATY_PEACE = 0x1,
  ASCEND_TREATY_WAR = 0x2,
  ASCEND_TREATY_ALLIANCE = 0x3,
};

/* 280 */
typedef T_WinState *P_WinState;

/* 281 */
struct T_Type7
{
  BYTE a;
  BYTE b;
};

/* 282 */
typedef char T_Name15[15];

/* 283 */
struct T_Matrix4x3D
{
  T_Vector3D vector1;
  T_Vector3D vector2;
  T_Vector3D vector3;
  T_Vector3D vector4;
};

/* 284 */
typedef T_Matrix4x3D *P_Matrix4x3D;

/* 287 */
typedef P_Ship *P_ShipsList;

/* 288 */
enum MACRO_ASCEND_PLANET_FLAGS
{
  ASCEND_PF_01_LUSH_GROWTH_BOMBED = 0x1,
  ASCEND_PF_02_HAS_XENO_RUINS = 0x2,
};

/* 289 */
enum MACRO_ASCEND_GIZMO
{
  ASCEND_GIZMO_00_MASS_BARRAGE_GUN = 0x0,
  ASCEND_GIZMO_01_FOURIER_MISSILES = 0x1,
  ASCEND_GIZMO_02_QUANTUM_SINGULARITY_LAUNCHER = 0x2,
  ASCEND_GIZMO_03_MOLECULAR_DISASSOCIATOR = 0x3,
  ASCEND_GIZMO_04_ELECTROMAGNETIC_PULSER = 0x4,
  ASCEND_GIZMO_05_PLASMATRON = 0x5,
  ASCEND_GIZMO_06_UEBERLASER = 0x6,
  ASCEND_GIZMO_07_FERGNATZ_LENS = 0x7,
  ASCEND_GIZMO_08_HYPERSPHERE_DRIVER = 0x8,
  ASCEND_GIZMO_09_NANOMANIPULATOR = 0x9,
  ASCEND_GIZMO_10_ION_WRAP = 0xA,
  ASCEND_GIZMO_11_CONCUSSION_SHIELD = 0xB,
  ASCEND_GIZMO_12_WAVE_SCATTERER = 0xC,
  ASCEND_GIZMO_13_DEACTOTRON = 0xD,
  ASCEND_GIZMO_14_HYPERWAVE_NULLIFIER = 0xE,
  ASCEND_GIZMO_15_NANOSHELL = 0xF,
  ASCEND_GIZMO_16_TONKLIN_MOTOR = 0x10,
  ASCEND_GIZMO_17_ION_BANGER = 0x11,
  ASCEND_GIZMO_18_GRAVITON_PROJECTOR = 0x12,
  ASCEND_GIZMO_19_INERTIA_NEGATOR = 0x13,
  ASCEND_GIZMO_20_NANOWAVE_SPACE_BENDER = 0x14,
  ASCEND_GIZMO_21_TONKLIN_FREQUENCY_ANALYZER = 0x15,
  ASCEND_GIZMO_22_SUBSPACE_PHASE_ARRAY = 0x16,
  ASCEND_GIZMO_23_AURAL_CLOUD_CONSTRUCTOR = 0x17,
  ASCEND_GIZMO_24_HYPERWAVE_TYMPANUM = 0x18,
  ASCEND_GIZMO_25_MURGATROYD_S_KNOWER = 0x19,
  ASCEND_GIZMO_26_NANOWAVE_DECOUPLING_NET = 0x1A,
  ASCEND_GIZMO_27_PROTON_SHAVER = 0x1B,
  ASCEND_GIZMO_28_SUBATOMIC_SCOOP = 0x1C,
  ASCEND_GIZMO_29_QUARK_EXPRESS = 0x1D,
  ASCEND_GIZMO_30_VAN_CREEG_HYPERSPLICER = 0x1E,
  ASCEND_GIZMO_31_NANOTWIRLER = 0x1F,
  ASCEND_GIZMO_32_LANE_BLOCKER = 0x20,
  ASCEND_GIZMO_33_MOLECULAR_TIE_DOWN = 0x21,
  ASCEND_GIZMO_34_INTELLECT_SCRAMBLER = 0x22,
  ASCEND_GIZMO_35_BRUNSWIK_DISSIPATOR = 0x23,
  ASCEND_GIZMO_36_RECALLER = 0x24,
  ASCEND_GIZMO_37_DISARMER = 0x25,
  ASCEND_GIZMO_38_SMART_BOMB = 0x26,
  ASCEND_GIZMO_39_GRAVITY_DISTORTER = 0x27,
  ASCEND_GIZMO_40_FLEET_DISPERSER = 0x28,
  ASCEND_GIZMO_41_X_RAY_MEGAGLASSES = 0x29,
  ASCEND_GIZMO_42_CLOAKER = 0x2A,
  ASCEND_GIZMO_43_STAR_LANE_DRIVE = 0x2B,
  ASCEND_GIZMO_44_STAR_LANE_HYPERDRIVE = 0x2C,
  ASCEND_GIZMO_45_POSITRON_BOUNCER = 0x2D,
  ASCEND_GIZMO_46_GRAVIMETRIC_CATAPULT = 0x2E,
  ASCEND_GIZMO_47_MYRMIDONIC_CARBONIZER = 0x2F,
  ASCEND_GIZMO_48_CONTAINMENT_DEVICE = 0x30,
  ASCEND_GIZMO_49_SHIELD_BLASTER = 0x31,
  ASCEND_GIZMO_50_BACKFIRER = 0x32,
  ASCEND_GIZMO_51_LANE_DESTABILIZER = 0x33,
  ASCEND_GIZMO_52_TRACTOR_BEAM = 0x34,
  ASCEND_GIZMO_53_CANNIBALIZER = 0x35,
  ASCEND_GIZMO_54_MOVING_PART_EXPLOITER = 0x36,
  ASCEND_GIZMO_55_HYPERSWAPPER = 0x37,
  ASCEND_GIZMO_56_GRAVIMETRIC_CONDENSOR = 0x38,
  ASCEND_GIZMO_57_ACCUTRON = 0x39,
  ASCEND_GIZMO_58_REMOTE_REPAIR_FACILITY = 0x3A,
  ASCEND_GIZMO_59_SACRIFICIAL_ORB = 0x3B,
  ASCEND_GIZMO_60_LANE_MAGNETRON = 0x3C,
  ASCEND_GIZMO_61_DISINTEGRATOR = 0x3D,
  ASCEND_GIZMO_62_LANE_ENDOSCOPE = 0x3E,
  ASCEND_GIZMO_63_TOROIDAL_BLASTER = 0x3F,
  ASCEND_GIZMO_64_GIZMOGRIFIER = 0x40,
  ASCEND_GIZMO_65_REPLENISHER = 0x41,
  ASCEND_GIZMO_66_SPECIALTY_BLASTER = 0x42,
  ASCEND_GIZMO_67_GYRO_INDUCTOR = 0x43,
  ASCEND_GIZMO_68_PLASMA_COUPLER = 0x44,
  ASCEND_GIZMO_69_INVULNERABLIZER = 0x45,
  ASCEND_GIZMO_70_PHASE_BOMB = 0x46,
  ASCEND_GIZMO_71_COLONIZER = 0x47,
  ASCEND_GIZMO_72_SELF_DESTRUCTOTRON = 0x48,
  ASCEND_GIZMO_73_INVASION_MODULE = 0x49,
  ASCEND_GIZMO_74_MASS_CONDENSOR = 0x4A,
  ASCEND_GIZMO_75_HYPERFUEL = 0x4B,
};

/* 291 */
enum MACRO_ASCEND_TARGET_TYPE
{
  ASCEND_TARGET_TYPE_0_STAR = 0x0,
  ASCEND_TARGET_TYPE_1_PLANET = 0x1,
  ASCEND_TARGET_TYPE_2_SHIP = 0x2,
  ASCEND_TARGET_TYPE_3_LANE = 0x3,
  ASCEND_TARGET_TYPE_4 = 0x4,
  ASCEND_TARGET_TYPE_5 = 0x5,
  ASCEND_TARGET_TYPE_6 = 0x6,
};

/* 297 */
struct $6776CEDB58323D7B178E61B79447ED93
{
  LONG x;
  LONG y;
  FIXED16 c;
  FIXED16 u;
  FIXED16 v;
  FIXED30 w;
};

/* 301 */
enum MACRO_VFX_LD
{
  LD_DRAW = 0,
  LD_TRANSLATE = 1,
  LD_EXECUTE = 2,
};

/* 303 */
typedef T_Wnd04BMt1 *P_Wnd04BMt1;

/* 305 */
typedef T_Wnd04BMt2 *P_Wnd04BMt2;

/* 307 */
typedef T_Wnd04BMt3 *P_Wnd04BMt3;

/* 309 */
struct __attribute__((packed)) T_Type20
{
  int Unknown_00;
  WORD message;
};

/* 311 */
enum MACRO_ASCEND_TECH
{
  ASCEND_TECH_00_ORBITAL_STRUCTURES = 0x0,
  ASCEND_TECH_01_INTERPLANETARY_EXPLORATION = 0x1,
  ASCEND_TECH_02_TONKLIN_DIARY = 0x2,
  ASCEND_TECH_03_SPACETIME_SURFING = 0x3,
  ASCEND_TECH_04_SUPERCONDUCTIVITY = 0x4,
  ASCEND_TECH_05_ENVIRONMENTAL_ENCAPSULATION = 0x5,
  ASCEND_TECH_06_XENOBIOLOGY = 0x6,
  ASCEND_TECH_07_SPECTRAL_ANALYSIS = 0x7,
  ASCEND_TECH_08_ADVANCED_INTERFEROMETRY = 0x8,
  ASCEND_TECH_09_POWER_CONVERSION = 0x9,
  ASCEND_TECH_10_ADVANCED_CHEMISTRY = 0xA,
  ASCEND_TECH_11_MOMENTUM_DECONSERVATION = 0xB,
  ASCEND_TECH_12_GRAVITY_CONTROL = 0xC,
  ASCEND_TECH_13_MOLECULAR_EXPLOSIVES = 0xD,
  ASCEND_TECH_14_HYPERLOGIC = 0xE,
  ASCEND_TECH_15_CLOAKING = 0xF,
  ASCEND_TECH_16_GRAVIMETRICS = 0x10,
  ASCEND_TECH_17_STRONG_FORCE_WEAKENING = 0x11,
  ASCEND_TECH_18_LIGHT_BENDING = 0x12,
  ASCEND_TECH_19_ADVANCED_EXPLORATION = 0x13,
  ASCEND_TECH_20_DIPLOMATICS = 0x14,
  ASCEND_TECH_21_MASS_PHASING = 0x15,
  ASCEND_TECH_22_POSITRON_GUIDANCE = 0x16,
  ASCEND_TECH_23_GRAVIMETRIC_COMBUSTION = 0x17,
  ASCEND_TECH_24_EM_FIELD_COUPLING = 0x18,
  ASCEND_TECH_25_SUBATOMICS = 0x19,
  ASCEND_TECH_26_PLANETARY_REPLENISHMENT = 0x1A,
  ASCEND_TECH_27_MOMENTUM_REFLECTION = 0x1B,
  ASCEND_TECH_28_HYPERRADIATION = 0x1C,
  ASCEND_TECH_29_PLASMATICS = 0x1D,
  ASCEND_TECH_30_ENERGY_REDIRECTION = 0x1E,
  ASCEND_TECH_31_LARGE_SCALE_CONSTRUCTION = 0x1F,
  ASCEND_TECH_32_LEVEL_LOGIC = 0x20,
  ASCEND_TECH_33_STAR_LANE_ANATOMY = 0x21,
  ASCEND_TECH_34_STASIS_FIELD_SCIENCE = 0x22,
  ASCEND_TECH_35_COHERENT_PHOTONICS = 0x23,
  ASCEND_TECH_36_SUPERSTRING_COMPRESSION = 0x24,
  ASCEND_TECH_37_MURGATROYD_HYPOTHESIS = 0x25,
  ASCEND_TECH_38_MATTER_DUPLICATION = 0x26,
  ASCEND_TECH_39_ENERGY_FOCUSING = 0x27,
  ASCEND_TECH_40_SCIENTIFIC_SORCERY = 0x28,
  ASCEND_TECH_41_ADVANCED_FUN_TECHNIQUES = 0x29,
  ASCEND_TECH_42_REPULSION_BEAM_TECH = 0x2A,
  ASCEND_TECH_43_HYPERWAVE_TECHNOLOGY = 0x2B,
  ASCEND_TECH_44_FERGNATZS_LAST_THEOREM = 0x2C,
  ASCEND_TECH_45_THOUGHT_ANALYSIS = 0x2D,
  ASCEND_TECH_46_INERTIAL_CONTROL = 0x2E,
  ASCEND_TECH_47_NANOENERGONS = 0x2F,
  ASCEND_TECH_48_HYPERGEOMETRY = 0x30,
  ASCEND_TECH_49_TELEINFILTRATION = 0x31,
  ASCEND_TECH_50_HYPERDRIVE_TECHNOLOGY = 0x32,
  ASCEND_TECH_51_MICROBOTICS = 0x33,
  ASCEND_TECH_52_ECOSPHERE_PHASE_CONTROL = 0x34,
  ASCEND_TECH_53_HYPERWAVE_EMISSION_CONTROL = 0x35,
  ASCEND_TECH_54_NANOPROPULSION = 0x36,
  ASCEND_TECH_55_NANODEFLECTION = 0x37,
  ASCEND_TECH_56_NANOFOCUSING = 0x38,
  ASCEND_TECH_57_DOOM_MECHANIZATION = 0x39,
  ASCEND_TECH_58_SNOOPING = 0x3A,
  ASCEND_TECH_59_MEGAGRAPH_THEORY = 0x3B,
  ASCEND_TECH_60_SELF_MODIFYING_STRUCTURES = 0x3C,
  ASCEND_TECH_61_ADVANCED_PLANETARY_ARMAMENTS = 0x3D,
  ASCEND_TECH_62_ACCEL_ENERGY_REPLENISHMENT = 0x3E,
  ASCEND_TECH_63_GRAVITY_FLOW_CONTROL = 0x3F,
  ASCEND_TECH_64_ACTION_AT_A_DISTANCE = 0x40,
  ASCEND_TECH_65_ILLUSORY_MACHINATIONS = 0x41,
};

/* 312 */
enum MACRO_ASCEND_WINMGR_STATE
{
  ASCEND_WINMGR_STATE_INACTIVE = 0xFFFF,
  ASCEND_WINMGR_STATE_OPENING = 0x0,
  ASCEND_WINMGR_STATE_MAIN_MENU = 0x1,
  ASCEND_WINMGR_STATE_SAVE_GAME = 0x2,
  ASCEND_WINMGR_STATE_NEW_GAME = 0x3,
  ASCEND_WINMGR_STATE_LOAD_GAME = 0x4,
  ASCEND_WINMGR_STATE_INTRO_FLIC = 0x6,
  ASCEND_WINMGR_STATE_RACE_SELECT = 0x7,
  ASCEND_WINMGR_STATE_SHIP_DESIGN = 0x8,
  ASCEND_WINMGR_STATE_ENDGAME = 0x9,
  ASCEND_WINMGR_STATE_PLANET_STATUS = 0xA,
  ASCEND_WINMGR_STATE_STARTGAME = 0xC,
  ASCEND_WINMGR_STATE_DIPLOMACY = 0xD,
  ASCEND_WINMGR_STATE_INTEL = 0xE,
  ASCEND_WINMGR_STATE_BATTLE = 0x10,
  ASCEND_WINMGR_STATE_PLANET_ALLOC = 0x11,
  ASCEND_WINMGR_STATE_FLEET_VIEW = 0x12,
  ASCEND_WINMGR_STATE_RESEARCH = 0x14,
};

/* 315 */
typedef T_ListBoxItem *P_ListBoxItem;

/* 316 */
enum MACRO_ASCEND_GIZMO_FLAGS
{
  ASCEND_GZ_TARGETSHIP = 0x1,
  ASCEND_GZ_TARGETLANE = 0x2,
  ASCEND_GZ_TARGETORBIT = 0x4,
  ASCEND_GZ_TARGETSURFACE = 0x8,
  ASCEND_GZ_TARGETOWNSHIPS = 0x10,
  ASCEND_GZ_TOGGLEABLE = 0x20,
  ASCEND_GZ_NOTARGET = 0x40,
  ASCEND_GZ_PASSIVE = 0x80,
};

/* 319 */
enum MACRO_ASCEND_EFFECT
{
  ASCEND_EFFECT_ENGINES_BOOST = 0x2,
  ASCEND_EFFECT_WEAPONS_INCREASED_RANGE = 0x4,
  ASCEND_EFFECT_INVULNERABLE = 0x10,
};

/* 321 */
struct __attribute__((packed)) T_PlanetSurfaces
{
  T_PlanetSurface surfaces[11];
};

/* 322 */
struct __attribute__((packed)) T_SquareGridCoord
{
  UWORD row;
  UWORD column;
};

/* 323 */
struct __attribute__((packed)) T_UWordPair
{
  UWORD word0;
  UWORD word1;
};

/* 324 */
struct __attribute__((packed)) T_WordPair
{
  WORD word0;
  WORD word1;
};

/* 327 */
enum MACRO_ASCEND_LANE_FLAGS
{
  ASCEND_LANE_FLAGS_1_RED_LINK = 0x1,
  ASCEND_LANE_FLAGS_2_BLOCKED = 0x2,
};

/* 328 */
enum MACRO_ASCEND_SHIP_ORDER
{
  ASCEND_SO_0_NOTHING = 0x0,
  ASCEND_SO_1_GOSTAR = 0x1,
  ASCEND_SO_2_COLONIZE = 0x2,
  ASCEND_SO_3_ORBITPLANET = 0x3,
  ASCEND_SO_4_PATROL = 0x4,
  ASCEND_SO_5_DEFENDPLANET = 0x5,
  ASCEND_SO_6_ATTACK = 0x6,
  ASCEND_SO_7_GOSPACE = 0x7,
};

/* 331 */
typedef unsigned int RT_STATE_VAR;

/* 335 */
struct RW_DTREG_BASE
{
  RW_DTREG *prev;
  void *handler;
  RO_DTREG *ro;
  RT_STATE_VAR state_var;
};

/* 333 */
struct RW_DTREG_BASE_STATIC
{
  RW_DTREG *prev;
  RO_DTREG *ro;
  RT_STATE_VAR state_var;
};

/* 330 */
union RW_DTREG
{
  RW_DTREG_BASE base;
  RW_DTREG_BASE_STATIC base_st;
};

/* 340 */
typedef unsigned int offset_t;

/* 341 */
struct RO_DTREG_BASE
{
  offset_t reg_type;
};

/* 338 */
union RO_STATE_U
{
  void *data_addr;
  offset_t data_offset;
  void *cmd_addr;
};

/* 339 */
struct RO_STATE
{
  pFUNdtor dtor;
  union RO_STATE_U u;
};

/* 343 */
struct RO_DTREG_FUN
{
  RO_DTREG_BASE base;
  offset_t rw_offset;
  RO_STATE state_table[1];
};

/* 342 */
struct RO_DTREG_INITLS
{
  RO_DTREG_BASE base;
  RO_STATE state_table[1];
};

/* 332 */
union RO_DTREG
{
  RO_DTREG_BASE base;
  RO_DTREG_FUN fun;
  RO_DTREG_INITLS init_ls;
};

/* 334 */
typedef int FSREGAPI;

/* 336 */
struct __attribute__((packed)) T_InputSystem
{
  char Unknown00;
};

/* 337 */
typedef T_InputSystem *P_InputSystem;

/* 345 */
enum MACRO_ASCEND_TEXT_FLAGS
{
  ASCEND_TF_VALIGN_MIDDLE = 0x1,
  ASCEND_TF_HALIGN_CENTER = 0x2,
  ASCEND_TF_HALIGN_CENTERXOFF = 0x8,
  ASCEND_TF_VALIGN_TOP = 0x10,
  ASCEND_TF_HALIGN_RIGHT = 0x20,
  ASCEND_TF_WIPE = 0x80,
};

/* 346 */
struct __attribute__((packed)) T_Type24
{
  UBYTE planetItemIndex;
  UWORD Unknown_1;
  UWORD Unknown_3;
};

/* 347 */
struct __attribute__((packed)) T_FPS
{
  int counter;
  int prevTimer;
  int lastTimer;
};

/* 348 */
enum MACRO_ASCEND_WIN_EVENTS
{
  EVT_MOUSE_POS = 0x1,
  EVT_MOUSE_BUTTON = 0x2,
  EVT_KEYBOARD = 0x3,
  EVT_REQ_CONT = 0x4,
  EVT_CAN_CONT = 0x5,
  EVT_REQ_CHANGE = 0x6,
  EVT_CAN_CHANGE = 0x7,
};

/* 349 */
enum MACRO_ASCEND_WIN_MESSAGES
{
  ASCEND_WM_DBGWND_MEMORY = 0x3EB,
  ASCEND_WM_DBGWND_CACHE = 0x3EC,
  ASCEND_WM_DBGWND_PALETTE = 0x3ED,
};

/* 353 */
struct __attribute__((packed)) T_Wnd05RW
{
  T_WndA2 a;
};

/* 354 */
typedef T_Wnd05RW *P_Wnd05RW;

/* 355 */
struct __attribute__((packed)) T_Wnd26MW
{
  T_WndA2 a2;
  int Unknown_AB;
  __int16 Unknown_AF;
  __int16 Unknown_B1;
};

/* 356 */
typedef T_Wnd26MW *P_Wnd26MW;

/* 357 */
struct __attribute__((packed)) T_WndEDITWND
{
  T_WndA2 a2;
  char *pText;
  WORD maxTextLength;
  WORD textLength;
  WORD cursorPos;
  WORD bgColor;
  WORD wipeColor;
  P_Font pFont;
  int Unknown_BD;
};

/* 358 */
typedef T_WndEDITWND *P_WndEDITWND;

/* 364 */
struct __attribute__((packed)) T_Type1
{
  T_Vector3D vectors1[100];
  T_Type16 t16[100];
  int z1[100];
  T_Vector3D vectors2[100];
  int Unknown_1900;
  int Unknown_1904;
  int Unknown_1908;
  T_Camera pCamera;
  float z2[25];
};

/* 365 */
typedef T_Type1 *P_Type1;

/* 366 */
struct __attribute__((packed)) T_Wnd24EW
{
  T_WndA2 a2;
};

/* 367 */
typedef T_Wnd24EW *P_Wnd24EW;

/* 368 */
struct __attribute__((packed)) T_Wnd30EW
{
  T_WndA2 a2;
};

/* 369 */
typedef T_Wnd30EW *P_Wnd30EW;

/* 371 */
typedef T_SubtitleInstruction *P_SubtitleInstruction;

/* 375 */
struct __attribute__((packed)) T_Type03
{
  char a[19];
  __int16 posX;
  __int16 posY;
};

/* 376 */
typedef T_Type03 *P_Type03;

/* 377 */
typedef T_HelpItem *P_HelpItem;

/* 378 */
typedef P_Ship T_ShipsList[107];

/* 380 */
struct __attribute__((packed)) T_Wnd29GSW
{
  T_WndA2 super;
};

/* 381 */
typedef T_Wnd29GSW *P_Wnd29GSW;

/* 382 */
enum MACRO_ASCEND_ENDING_CONDITION
{
  ASCEND_EC_0_NONE = 0x0,
  ASCEND_EC_1_EXTINCT = 0x1,
  ASCEND_EC_2_DESTROYED_ALL = 0x2,
  ASCEND_EC_3_CAPTURED_HOMES = 0x3,
  ASCEND_EC_4_ALLIED = 0x4,
  ASCEND_EC_5_CONTROL = 0x5,
};

/* 383 */
struct __attribute__((packed)) T_Wnd31PCW
{
  T_WndA2 super;
};

/* 384 */
typedef T_Wnd31PCW *P_Wnd31PCW;

/* 385 */
struct __attribute__((packed)) T_Wnd32MIW
{
  T_WndA2 super;
};

/* 386 */
typedef T_Wnd32MIW *P_Wnd32MIW;

/* 387 */
typedef char T_Text128[128];

/* 388 */
enum MACRO_ASCEND_DIP_RESPONSE
{
  ASCEND_DR_RESPONSE_Discover = 0x0,
  ASCEND_DR_ACCEPT_DiscoverAskHelp = 0x1,
  ASCEND_DR_REJECT_DiscoverAskHelp = 0x2,
  ASCEND_DR_RESPONSE_DeclareWar = 0x3,
  ASCEND_DR_ACCEPT_Alliance = 0x4,
  ASCEND_DR_REJECT_Alliance = 0x5,
  ASCEND_DR_ACCEPT_TradeStarlanes = 0x6,
  ASCEND_DR_REJECT_TradeStarlanes = 0x7,
  ASCEND_DR_ACCEPT_TradeStars = 0x8,
  ASCEND_DR_REJECT_TradeStars = 0x9,
  ASCEND_DR_ACCEPT_TradeResearch = 0xA,
  ASCEND_DR_REJECT_TradeResearch = 0xB,
  ASCEND_DR_ACCEPT_OfferPeaceToOtherRace = 0xC,
  ASCEND_DR_REJECT_OfferPeaceToOtherRace = 0xD,
  ASCEND_DR_RESPONSE_BreakAlliance = 0xE,
  ASCEND_DR_ACCEPT_DeclareWarOnOtherRace = 0xF,
  ASCEND_DR_REJECT_DeclareWarOnOtherRace = 0x10,
  ASCEND_DR_ACCEPT_BreakAllianceWithOtherRace = 0x11,
  ASCEND_DR_REJECT_BreakAllianceWithOtherRace = 0x12,
  ASCEND_DR_ACCEPT_ProposeAllianceToOtherRace = 0x13,
  ASCEND_DR_REJECT_ProposeAllianceToOtherRace = 0x14,
  ASCEND_DR_ACCEPT_HelpControlSystem = 0x15,
  ASCEND_DR_REJECT_HelpControlSystem = 0x16,
  ASCEND_DR_NOSHIPS_HelpControlSystem = 0x17,
  ASCEND_DR_NOWAR_HelpControlSystem = 0x18,
  ASCEND_DR_NOMORESHIPS_HelpControlSystem = 0x19,
  ASCEND_DR_MORESHIPS_HelpControlSystem = 0x1A,
  ASCEND_DR_ACCEPT_OfferPeace = 0x1B,
  ASCEND_DR_REJECT_OfferPeace = 0x1C,
  ASCEND_DR_NoDipResponse = 0x1D,
};


/*
   This file has been generated by IDA.
   It contains local type definitions from
   the type library 'civ2'
*/

#define __int8 char
#define __int16 short
#define __int32 int
#define __int64 long long

struct tagWNDCLASSA;
struct HWND__;
struct HICON__;
struct HBRUSH__;
struct tagLOGFONTA;
struct HDC__;
struct tWAVEFORMATEX;
struct HTASK__;
struct HMMIO__;
struct tagBITMAPINFO;
struct _GUID;
struct _RTL_CRITICAL_SECTION_DEBUG;
struct _MIDL_STUB_DESC;
struct __GENERIC_BINDING_INFO;
struct _GENERIC_BINDING_ROUTINE_PAIR;
struct _MIDL_STUB_MESSAGE;
struct _RPC_MESSAGE;
struct _RPC_SYNTAX_IDENTIFIER;
struct _FULL_PTR_XLAT_TABLES;
struct $3FA64165D15A4602C29B2D9B0DA4A5E9;
struct $0F4C31D81B3E066615C27062B4195938;
struct _XMIT_ROUTINE_QUINTUPLE;
struct _MALLOC_FREE_STRUCT;
struct _COMM_FAULT_OFFSETS;
struct _USER_MARSHAL_ROUTINE_QUADRUPLE;
struct _NDR_CS_ROUTINES;
struct _NDR_CS_SIZE_CONVERT_ROUTINES;
struct _NDR_EXPR_DESC;
union _LARGE_INTEGER;
struct tagMIXERCONTROLW;
struct _EXCEPTION_RECORD;
struct _CONTEXT;
struct T_DrawInfo;
struct T_ControlInfoScroll;

/* 1 */
struct _SCOPETABLE_ENTRY
{
  int EnclosingLevel;
  void *FilterFunc;
  void *HandlerFunc;
};

/* 2 */
typedef struct _SCOPETABLE_ENTRY *PSCOPETABLE_ENTRY;

/* 239 */
typedef void *PVOID;

/* 32 */
typedef unsigned __int32 DWORD;

/* 3 */
struct _EH3_EXCEPTION_REGISTRATION
{
  struct _EH3_EXCEPTION_REGISTRATION *Next;
  PVOID ExceptionHandler;
  PSCOPETABLE_ENTRY ScopeTable;
  DWORD TryLevel;
};

/* 4 */
typedef struct _EH3_EXCEPTION_REGISTRATION EH3_EXCEPTION_REGISTRATION;

/* 5 */
typedef struct _EH3_EXCEPTION_REGISTRATION *PEH3_EXCEPTION_REGISTRATION;

/* 6 */
struct CPPEH_RECORD
{
  DWORD old_esp;
  EXCEPTION_POINTERS *exc_ptr;
  struct _EH3_EXCEPTION_REGISTRATION registration;
};

/* 8 */
typedef __int32 LONG;

/* 7 */
struct tagRECT
{
  LONG left;
  LONG top;
  LONG right;
  LONG bottom;
};

/* 9 */
typedef tagWNDCLASSA WNDCLASSA;

/* 11 */
typedef unsigned int UINT;

/* 17 */
typedef LONG LRESULT;

/* 13 */
typedef HWND__ *HWND;

/* 15 */
typedef UINT WPARAM;

/* 16 */
typedef LONG LPARAM;

/* 12 */
typedef LRESULT (__stdcall *WNDPROC)(HWND, UINT, WPARAM, LPARAM);

/* 18 */
typedef #19 *HINSTANCE;

/* 20 */
typedef HICON__ *HICON;

/* 22 */
typedef HICON HCURSOR;

/* 23 */
typedef HBRUSH__ *HBRUSH;

/* 26 */
typedef char CHAR;

/* 25 */
typedef const CHAR *LPCSTR;

/* 10 */
struct tagWNDCLASSA
{
  UINT style;
  WNDPROC lpfnWndProc;
  int cbClsExtra;
  int cbWndExtra;
  HINSTANCE hInstance;
  HICON hIcon;
  HCURSOR hCursor;
  HBRUSH hbrBackground;
  LPCSTR lpszMenuName;
  LPCSTR lpszClassName;
};

/* 14 */
struct HWND__
{
  int unused;
};

/* 21 */
struct HICON__
{
  int unused;
};

/* 24 */
struct HBRUSH__
{
  int unused;
};

/* 27 */
struct tagPOINT
{
  LONG x;
  LONG y;
};

/* 29 */
typedef unsigned __int8 BYTE;

/* 30 */
typedef unsigned __int16 WORD;

/* 28 */
struct _OFSTRUCT
{
  BYTE cBytes;
  BYTE fFixedDisk;
  WORD nErrCode;
  WORD Reserved1;
  WORD Reserved2;
  CHAR szPathName[128];
};

/* 33 */
typedef CHAR *LPSTR;

/* 34 */
typedef UINT (__stdcall *LPOFNHOOKPROC)(HWND, UINT, WPARAM, LPARAM);

/* 31 */
#pragma pack(push, 1)
struct tagOFNA
{
  DWORD lStructSize;
  HWND hwndOwner;
  HINSTANCE hInstance;
  LPCSTR lpstrFilter;
  LPSTR lpstrCustomFilter;
  DWORD nMaxCustFilter;
  DWORD nFilterIndex;
  LPSTR lpstrFile;
  DWORD nMaxFile;
  LPSTR lpstrFileTitle;
  DWORD nMaxFileTitle;
  LPCSTR lpstrInitialDir;
  LPCSTR lpstrTitle;
  DWORD Flags;
  WORD nFileOffset;
  WORD nFileExtension;
  LPCSTR lpstrDefExt;
  LPARAM lCustData;
  LPOFNHOOKPROC lpfnHook;
  LPCSTR lpTemplateName;
};
#pragma pack(pop)

/* 35 */
struct _SYSTEMTIME
{
  WORD wYear;
  WORD wMonth;
  WORD wDayOfWeek;
  WORD wDay;
  WORD wHour;
  WORD wMinute;
  WORD wSecond;
  WORD wMilliseconds;
};

/* 38 */
struct _FILETIME
{
  DWORD dwLowDateTime;
  DWORD dwHighDateTime;
};

/* 37 */
typedef _FILETIME FILETIME;

/* 36 */
struct _WIN32_FIND_DATAA
{
  DWORD dwFileAttributes;
  FILETIME ftCreationTime;
  FILETIME ftLastAccessTime;
  FILETIME ftLastWriteTime;
  DWORD nFileSizeHigh;
  DWORD nFileSizeLow;
  DWORD dwReserved0;
  DWORD dwReserved1;
  CHAR cFileName[260];
  CHAR cAlternateFileName[14];
};

/* 40 */
typedef tagPOINT POINT;

/* 39 */
struct tagMSG
{
  HWND hwnd;
  UINT message;
  WPARAM wParam;
  LPARAM lParam;
  DWORD time;
  POINT pt;
};

/* 41 */
typedef tagLOGFONTA LOGFONTA;

/* 42 */
struct tagLOGFONTA
{
  LONG lfHeight;
  LONG lfWidth;
  LONG lfEscapement;
  LONG lfOrientation;
  LONG lfWeight;
  BYTE lfItalic;
  BYTE lfUnderline;
  BYTE lfStrikeOut;
  BYTE lfCharSet;
  BYTE lfOutPrecision;
  BYTE lfClipPrecision;
  BYTE lfQuality;
  BYTE lfPitchAndFamily;
  CHAR lfFaceName[32];
};

/* 43 */
struct tagTEXTMETRICA
{
  LONG tmHeight;
  LONG tmAscent;
  LONG tmDescent;
  LONG tmInternalLeading;
  LONG tmExternalLeading;
  LONG tmAveCharWidth;
  LONG tmMaxCharWidth;
  LONG tmWeight;
  LONG tmOverhang;
  LONG tmDigitizedAspectX;
  LONG tmDigitizedAspectY;
  BYTE tmFirstChar;
  BYTE tmLastChar;
  BYTE tmDefaultChar;
  BYTE tmBreakChar;
  BYTE tmItalic;
  BYTE tmUnderlined;
  BYTE tmStruckOut;
  BYTE tmPitchAndFamily;
  BYTE tmCharSet;
};

/* 44 */
struct tagSIZE
{
  LONG cx;
  LONG cy;
};

/* 46 */
typedef HDC__ *HDC;

/* 48 */
typedef int BOOL;

/* 49 */
typedef tagRECT RECT;

/* 45 */
struct tagPAINTSTRUCT
{
  HDC hdc;
  BOOL fErase;
  RECT rcPaint;
  BOOL fRestore;
  BOOL fIncUpdate;
  BYTE rgbReserved[32];
};

/* 47 */
struct HDC__
{
  int unused;
};

/* 51 */
typedef UINT MMVERSION;

/* 50 */
#pragma pack(push, 1)
struct tagWAVEOUTCAPSA
{
  WORD wMid;
  WORD wPid;
  MMVERSION vDriverVersion;
  CHAR szPname[32];
  DWORD dwFormats;
  WORD wChannels;
  WORD wReserved1;
  DWORD dwSupport;
};
#pragma pack(pop)

/* 52 */
typedef tWAVEFORMATEX WAVEFORMATEX;

/* 53 */
#pragma pack(push, 1)
struct tWAVEFORMATEX
{
  WORD wFormatTag;
  WORD nChannels;
  DWORD nSamplesPerSec;
  DWORD nAvgBytesPerSec;
  WORD nBlockAlign;
  WORD wBitsPerSample;
  WORD cbSize;
};
#pragma pack(pop)

/* 55 */
typedef DWORD FOURCC;

/* 57 */
typedef LRESULT __stdcall MMIOPROC(LPSTR lpmmioinfo, UINT uMsg, LPARAM lParam1, LPARAM lParam2);

/* 56 */
typedef MMIOPROC *LPMMIOPROC;

/* 58 */
typedef HTASK__ *HTASK;

/* 60 */
typedef char *HPSTR;

/* 61 */
typedef HMMIO__ *HMMIO;

/* 54 */
#pragma pack(push, 1)
struct _MMIOINFO
{
  DWORD dwFlags;
  FOURCC fccIOProc;
  LPMMIOPROC pIOProc;
  UINT wErrorRet;
  HTASK htask;
  LONG cchBuffer;
  HPSTR pchBuffer;
  HPSTR pchNext;
  HPSTR pchEndRead;
  HPSTR pchEndWrite;
  LONG lBufOffset;
  LONG lDiskOffset;
  DWORD adwInfo[3];
  DWORD dwReserved1;
  DWORD dwReserved2;
  HMMIO hmmio;
};
#pragma pack(pop)

/* 59 */
struct HTASK__
{
  int unused;
};

/* 62 */
#pragma pack(push, 1)
struct HMMIO__
{
  int unused;
};
#pragma pack(pop)

/* 63 */
#pragma pack(push, 1)
struct _MMCKINFO
{
  FOURCC ckid;
  DWORD cksize;
  FOURCC fccType;
  DWORD dwDataOffset;
  DWORD dwFlags;
};
#pragma pack(pop)

/* 64 */
#pragma pack(push, 8)
struct _AVISTREAMINFOA
{
  DWORD fccType;
  DWORD fccHandler;
  DWORD dwFlags;
  DWORD dwCaps;
  WORD wPriority;
  WORD wLanguage;
  DWORD dwScale;
  DWORD dwRate;
  DWORD dwStart;
  DWORD dwLength;
  DWORD dwInitialFrames;
  DWORD dwSuggestedBufferSize;
  DWORD dwQuality;
  DWORD dwSampleSize;
  RECT rcFrame;
  DWORD dwEditCount;
  DWORD dwFormatChangeCount;
  char szName[64];
};
#pragma pack(pop)

/* 67 */
#pragma pack(push, 1)
struct mmtime_tag::$532DCF0E9B9A2B0A020BD11490F25514::$2498AB4F57B5A5935D3AAA9956C218FB
{
  BYTE hour;
  BYTE min;
  BYTE sec;
  BYTE frame;
  BYTE fps;
  BYTE dummy;
  BYTE pad[2];
};
#pragma pack(pop)

/* 68 */
#pragma pack(push, 1)
struct mmtime_tag::$532DCF0E9B9A2B0A020BD11490F25514::$B7A2B1CE967584EBB3840978181CF21D
{
  DWORD songptrpos;
};
#pragma pack(pop)

/* 66 */
#pragma pack(push, 1)
union mmtime_tag::$532DCF0E9B9A2B0A020BD11490F25514
{
  DWORD ms;
  DWORD sample;
  DWORD cb;
  DWORD ticks;
  mmtime_tag::$532DCF0E9B9A2B0A020BD11490F25514::$2498AB4F57B5A5935D3AAA9956C218FB smpte;
  mmtime_tag::$532DCF0E9B9A2B0A020BD11490F25514::$B7A2B1CE967584EBB3840978181CF21D midi;
};
#pragma pack(pop)

/* 65 */
#pragma pack(push, 1)
struct mmtime_tag
{
  UINT wType;
  mmtime_tag::$532DCF0E9B9A2B0A020BD11490F25514 u;
};
#pragma pack(pop)

/* 69 */
typedef tagBITMAPINFO BITMAPINFO;

/* 72 */
struct tagBITMAPINFOHEADER
{
  DWORD biSize;
  LONG biWidth;
  LONG biHeight;
  WORD biPlanes;
  WORD biBitCount;
  DWORD biCompression;
  DWORD biSizeImage;
  LONG biXPelsPerMeter;
  LONG biYPelsPerMeter;
  DWORD biClrUsed;
  DWORD biClrImportant;
};

/* 71 */
typedef tagBITMAPINFOHEADER BITMAPINFOHEADER;

/* 74 */
struct tagRGBQUAD
{
  BYTE rgbBlue;
  BYTE rgbGreen;
  BYTE rgbRed;
  BYTE rgbReserved;
};

/* 73 */
typedef tagRGBQUAD RGBQUAD;

/* 70 */
struct tagBITMAPINFO
{
  BITMAPINFOHEADER bmiHeader;
  RGBQUAD bmiColors[1];
};

/* 76 */
typedef BYTE *LPBYTE;

/* 77 */
typedef void *HANDLE;

/* 75 */
struct _STARTUPINFOA
{
  DWORD cb;
  LPSTR lpReserved;
  LPSTR lpDesktop;
  LPSTR lpTitle;
  DWORD dwX;
  DWORD dwY;
  DWORD dwXSize;
  DWORD dwYSize;
  DWORD dwXCountChars;
  DWORD dwYCountChars;
  DWORD dwFillAttribute;
  DWORD dwFlags;
  WORD wShowWindow;
  WORD cbReserved2;
  LPBYTE lpReserved2;
  HANDLE hStdInput;
  HANDLE hStdOutput;
  HANDLE hStdError;
};

/* 80 */
typedef unsigned __int16 wchar_t;

/* 79 */
typedef wchar_t WCHAR;

/* 81 */
typedef _SYSTEMTIME SYSTEMTIME;

/* 78 */
struct _TIME_ZONE_INFORMATION
{
  LONG Bias;
  WCHAR StandardName[32];
  SYSTEMTIME StandardDate;
  LONG StandardBias;
  WCHAR DaylightName[32];
  SYSTEMTIME DaylightDate;
  LONG DaylightBias;
};

/* 82 */
struct _cpinfo
{
  UINT MaxCharSize;
  BYTE DefaultChar[2];
  BYTE LeadByte[12];
};

/* 84 */
typedef void *LPVOID;

/* 83 */
struct _SECURITY_ATTRIBUTES
{
  DWORD nLength;
  LPVOID lpSecurityDescriptor;
  BOOL bInheritHandle;
};

/* 85 */
struct ios_base;

/* 86 */
struct CRecentFileList;

/* 87 */
struct HeapManager::Block;

/* 88 */
struct _Timevec;

/* 89 */
struct CMirrorFile;

/* 90 */
struct _AFX_PROPPAGEFONTINFO;

/* 91 */
struct ios;

/* 92 */
struct streambuf;

/* 93 */
struct AFX_DB_STATE;

/* 94 */
struct CWinThread;

/* 95 */
struct CFieldInfo;

/* 96 */
struct CDaoErrorInfo;

/* 97 */
struct CDockState;

/* 98 */
struct exception;

/* 99 */
struct _msExcInfo
{
  int Id;
  void *Proc;
};

/* 100 */
struct _msExcept
{
  int Magic;
  int Count;
  void *InfoPtr;
  int CountDtr;
  void *DtrPtr;
  int _unk[3];
  _msExcInfo Info[];
};

/* 254 */
#pragma pack(push, 1)
struct T_WindowInfo
{
  LONG Unknown1;
  LONG Unknown2;
  LONG WindowStructure;
  LONG Unknown4;
  LONG WindowProcs[20];
  char Unknown5[44];
  DWORD PopupActive;
  char Unknown6[44];
  LONG ButtonInfoOK;
  LONG ButtonInfoCancel;
};
#pragma pack(pop)

/* 103 */
#pragma pack(push, 1)
struct T_CitySprite
{
  int X1;
  int Y1;
  int X2;
  int Y2;
  int Type;
  int Index;
};
#pragma pack(pop)

/* 102 */
#pragma pack(push, 1)
struct T_CitySpritesInfo
{
  T_CitySprite CitySprites[200];
  int CitySpritesItems;
};
#pragma pack(pop)

/* 265 */
typedef T_ControlInfoScroll *P_ControlInfoScroll;

/* 101 */
#pragma pack(push, 1)
struct T_CityWindow
{
  __int8 Unknown1[20];
  RECT ClientRect;
  RECT WindowRect;
  __int8 Unknown2[20];
  T_WindowInfo WindowInfo;
  __int8 Unknown3[460];
  T_CitySpritesInfo CitySpritesInfo;
  int CityIndex;
  int Unknown4;
  int Unknown5;
  int Unknown6;
  int Unknown7;
  int Unknown8;
  int ImproveListStart;
  int ImproveCount;
  __int8 Unknown9[24];
  int WindowSize;
  __int8 Unknown10[4];
  RECT RectCitizens;
  RECT Rect1;
  RECT RectFoodStorage;
  RECT Rect3;
  RECT Rect4;
  RECT RectSupportOut;
  RECT RectImproveOut;
  RECT RectInfoOut;
  RECT RectResourceMap;
  RECT RectImproveIn;
  RECT RectSupportIn;
  RECT RectInfoIn;
  RECT RectImproveScroll;
  __int8 Unknown11[8];
  int ControlInfo[10];
  P_ControlInfoScroll ControlInfoScroll;
};
#pragma pack(pop)

/* 104 */
union __declspec(align(8)) __m64
{
  unsigned __int64 m64_u64;
  float m64_f32[2];
  __int8 m64_i8[8];
  __int16 m64_i16[4];
  __int32 m64_i32[2];
  __int64 m64_i64;
  unsigned __int8 m64_u8[8];
  unsigned __int16 m64_u16[4];
  unsigned __int32 m64_u32[2];
};

/* 105 */
union __declspec(align(16)) __m128
{
  float m128_f32[4];
  unsigned __int64 m128_u64[2];
  __int8 m128_i8[16];
  __int16 m128_i16[8];
  __int32 m128_i32[4];
  __int64 m128_i64[2];
  unsigned __int8 m128_u8[16];
  unsigned __int16 m128_u16[8];
  unsigned __int32 m128_u32[4];
};

/* 106 */
struct __m128d
{
  double m128d_f64[2];
};

/* 107 */
union __declspec(align(16)) __m128i
{
  __int8 m128i_i8[16];
  __int16 m128i_i16[8];
  __int32 m128i_i32[4];
  __int64 m128i_i64[2];
  unsigned __int8 m128i_u8[16];
  unsigned __int16 m128i_u16[8];
  unsigned __int32 m128i_u32[4];
  unsigned __int64 m128i_u64[2];
};

/* 108 */
enum MACRO_R2_LAST
{
  R2_LAST = 16,
  SRCCOPY = 13369376,
  SRCPAINT = 15597702,
};

/* 109 */
enum MACRO_SRCAND
{
  SRCAND = 0x8800C6,
};

/* 110 */
enum MACRO_WM
{
  WM_NULL = 0x0,
  WM_CREATE = 0x1,
  WM_DESTROY = 0x2,
  WM_MOVE = 0x3,
  WM_SIZEWAIT = 0x4,
  WM_SIZE = 0x5,
  WM_ACTIVATE = 0x6,
  WM_SETFOCUS = 0x7,
  WM_KILLFOCUS = 0x8,
  WM_SETVISIBLE = 0x9,
  WM_ENABLE = 0xA,
  WM_SETREDRAW = 0xB,
  WM_SETTEXT = 0xC,
  WM_GETTEXT = 0xD,
  WM_GETTEXTLENGTH = 0xE,
  WM_PAINT = 0xF,
  WM_CLOSE = 0x10,
  WM_QUERYENDSESSION = 0x11,
  WM_QUIT = 0x12,
  WM_QUERYOPEN = 0x13,
  WM_ERASEBKGND = 0x14,
  WM_SYSCOLORCHANGE = 0x15,
  WM_ENDSESSION = 0x16,
  WM_SYSTEMERROR = 0x17,
  WM_SHOWWINDOW = 0x18,
  WM_CTLCOLOR = 0x19,
  WM_WININICHANGE = 0x1A,
  WM_SETTINGCHANGE = 0x1A,
  WM_DEVMODECHANGE = 0x1B,
  WM_ACTIVATEAPP = 0x1C,
  WM_FONTCHANGE = 0x1D,
  WM_TIMECHANGE = 0x1E,
  WM_CANCELMODE = 0x1F,
  WM_SETCURSOR = 0x20,
  WM_MOUSEACTIVATE = 0x21,
  WM_CHILDACTIVATE = 0x22,
  WM_QUEUESYNC = 0x23,
  WM_GETMINMAXINFO = 0x24,
  WM_LOGOFF = 0x25,
  WM_PAINTICON = 0x26,
  WM_ICONERASEBKGND = 0x27,
  WM_NEXTDLGCTL = 0x28,
  WM_ALTTABACTIVE = 0x29,
  WM_SPOOLERSTATUS = 0x2A,
  WM_DRAWITEM = 0x2B,
  WM_MEASUREITEM = 0x2C,
  WM_DELETEITEM = 0x2D,
  WM_VKEYTOITEM = 0x2E,
  WM_CHARTOITEM = 0x2F,
  WM_SETFONT = 0x30,
  WM_GETFONT = 0x31,
  WM_SETHOTKEY = 0x32,
  WM_GETHOTKEY = 0x33,
  WM_FILESYSCHANGE = 0x34,
  WM_ISACTIVEICON = 0x35,
  WM_QUERYPARKICON = 0x36,
  WM_QUERYDRAGICON = 0x37,
  WM_WINHELP = 0x38,
  WM_COMPAREITEM = 0x39,
  WM_FULLSCREEN = 0x3A,
  WM_CLIENTSHUTDOWN = 0x3B,
  WM_DDEMLEVENT = 0x3C,
  WM_GETOBJECT = 0x3D,
  MM_CALCSCROLL = 0x3F,
  WM_TESTING = 0x40,
  WM_COMPACTING = 0x41,
  WM_OTHERWINDOWCREATED = 0x42,
  WM_OTHERWINDOWDESTROYED = 0x43,
  WM_COMMNOTIFY = 0x44,
  WM_MEDIASTATUSCHANGE = 0x45,
  WM_WINDOWPOSCHANGING = 0x46,
  WM_WINDOWPOSCHANGED = 0x47,
  WM_POWER = 0x48,
  WM_COPYGLOBALDATA = 0x49,
  WM_COPYDATA = 0x4A,
  WM_CANCELJOURNAL = 0x4B,
  WM_LOGONNOTIFY = 0x4C,
  WM_KEYF1 = 0x4D,
  WM_NOTIFY = 0x4E,
  WM_ACCESS_WINDOW = 0x4F,
  WM_INPUTLANGCHANGEREQUEST = 0x50,
  WM_INPUTLANGCHANGE = 0x51,
  WM_TCARD = 0x52,
  WM_HELP = 0x53,
  WM_USERCHANGED = 0x54,
  WM_NOTIFYFORMAT = 0x55,
  WM_QM_ACTIVATE = 0x60,
  WM_HOOK_DO_CALLBACK = 0x61,
  WM_SYSCOPYDATA = 0x62,
  WM_FINALDESTROY = 0x70,
  WM_MEASUREITEM_CLIENTDATA = 0x71,
  WM_CONTEXTMENU = 0x7B,
  WM_STYLECHANGING = 0x7C,
  WM_STYLECHANGED = 0x7D,
  WM_DISPLAYCHANGE = 0x7E,
  WM_GETICON = 0x7F,
  WM_SETICON = 0x80,
  WM_NCCREATE = 0x81,
  WM_NCDESTROY = 0x82,
  WM_NCCALCSIZE = 0x83,
  WM_NCHITTEST = 0x84,
  WM_NCPAINT = 0x85,
  WM_NCACTIVATE = 0x86,
  WM_GETDLGCODE = 0x87,
  WM_SYNCPAINT = 0x88,
  WM_SYNCTASK = 0x89,
  WM_NCMOUSEMOVE = 0xA0,
  WM_NCLBUTTONDOWN = 0xA1,
  WM_NCLBUTTONUP = 0xA2,
  WM_NCLBUTTONDBLCLK = 0xA3,
  WM_NCRBUTTONDOWN = 0xA4,
  WM_NCRBUTTONUP = 0xA5,
  WM_NCRBUTTONDBLCLK = 0xA6,
  WM_NCMBUTTONDOWN = 0xA7,
  WM_NCMBUTTONUP = 0xA8,
  WM_NCMBUTTONDBLCLK = 0xA9,
  WM_NCXBUTTONDOWN = 0xAB,
  WM_NCXBUTTONUP = 0xAC,
  WM_NCXBUTTONDBLCLK = 0xAD,
  EM_GETSEL = 0xB0,
  EM_SETSEL = 0xB1,
  EM_GETRECT = 0xB2,
  EM_SETRECT = 0xB3,
  EM_SETRECTNP = 0xB4,
  EM_SCROLL = 0xB5,
  EM_LINESCROLL = 0xB6,
  EM_SCROLLCARET = 0xB7,
  EM_GETMODIFY = 0xB8,
  EM_SETMODIFY = 0xB9,
  EM_GETLINECOUNT = 0xBA,
  EM_LINEINDEX = 0xBB,
  EM_SETHANDLE = 0xBC,
  EM_GETHANDLE = 0xBD,
  EM_GETTHUMB = 0xBE,
  EM_LINELENGTH = 0xC1,
  EM_REPLACESEL = 0xC2,
  EM_SETFONT = 0xC3,
  EM_GETLINE = 0xC4,
  EM_LIMITTEXT = 0xC5,
  EM_CANUNDO = 0xC6,
  EM_UNDO = 0xC7,
  EM_FMTLINES = 0xC8,
  EM_LINEFROMCHAR = 0xC9,
  EM_SETWORDBREAK = 0xCA,
  EM_SETTABSTOPS = 0xCB,
  EM_SETPASSWORDCHAR = 0xCC,
  EM_EMPTYUNDOBUFFER = 0xCD,
  EM_GETFIRSTVISIBLELINE = 0xCE,
  EM_SETREADONLY = 0xCF,
  EM_SETWORDBREAKPROC = 0xD0,
  EM_GETWORDBREAKPROC = 0xD1,
  EM_GETPASSWORDCHAR = 0xD2,
  EM_SETMARGINS = 0xD3,
  EM_GETMARGINS = 0xD4,
  EM_POSFROMCHAR = 0xD5,
  EM_CHARFROMPOS = 0xD6,
  SBM_SETPOS = 0xE0,
  SBM_GETPOS = 0xE1,
  SBM_SETRANGE = 0xE2,
  SBM_GETRANGE = 0xE3,
  SBM_ENABLE_ARROWS = 0xE4,
  SBM_SETRANGEREDRAW = 0xE6,
  SBM_SETSCROLLINFO = 0xE9,
  SBM_GETSCROLLINFO = 0xEA,
  SBM_GETSCROLLBARINFO = 0xEB,
  BM_GETCHECK = 0xF0,
  BM_SETCHECK = 0xF1,
  BM_GETSTATE = 0xF2,
  BM_SETSTATE = 0xF3,
  BM_SETSTYLE = 0xF4,
  BM_CLICK = 0xF5,
  BM_GETIMAGE = 0xF6,
  BM_SETIMAGE = 0xF7,
  BM_SETDONTCLICK = 0xF8,
  WM_INPUT = 0xFF,
  WM_KEYFIRST = 0x100,
  WM_KEYDOWN = 0x100,
  WM_KEYUP = 0x101,
  WM_CHAR = 0x102,
  WM_DEADCHAR = 0x103,
  WM_SYSKEYDOWN = 0x104,
  WM_SYSKEYUP = 0x105,
  WM_SYSCHAR = 0x106,
  WM_SYSDEADCHAR = 0x107,
  WM_KEYLAST = 0x108,
  WM_YOMICHAR = 0x108,
  WM_UNICHAR = 0x109,
  WM_CONVERTREQUEST = 0x10A,
  WM_CONVERTRESULT = 0x10B,
  WM_IM_INFO = 0x10C,
  WM_IME_STARTCOMPOSITION = 0x10D,
  WM_IME_ENDCOMPOSITION = 0x10E,
  WM_IME_COMPOSITION = 0x10F,
  WM_IME_KEYLAST = 0x10F,
  WM_INITDIALOG = 0x110,
  WM_COMMAND = 0x111,
  WM_SYSCOMMAND = 0x112,
  WM_TIMER = 0x113,
  WM_HSCROLL = 0x114,
  WM_VSCROLL = 0x115,
  WM_INITMENU = 0x116,
  WM_INITMENUPOPUP = 0x117,
  WM_SYSTIMER = 0x118,
  WM_MENUSELECT = 0x11F,
  WM_MENUCHAR = 0x120,
  WM_ENTERIDLE = 0x121,
  WM_MENURBUTTONUP = 0x122,
  WM_MENUDRAG = 0x123,
  WM_MENUGETOBJECT = 0x124,
  WM_UNINITMENUPOPUP = 0x125,
  WM_MENUCOMMAND = 0x126,
  WM_CHANGEUISTATE = 0x127,
  WM_UPDATEUISTATE = 0x128,
  WM_QUERYUISTATE = 0x129,
  WM_LBTRACKPOINT = 0x131,
  WM_CTLCOLORMSGBOX = 0x132,
  WM_CTLCOLOREDIT = 0x133,
  WM_CTLCOLORLISTBOX = 0x134,
  WM_CTLCOLORBTN = 0x135,
  WM_CTLCOLORDLG = 0x136,
  WM_CTLCOLORSCROLLBAR = 0x137,
  WM_CTLCOLORSTATIC = 0x138,
  CB_GETEDITSEL = 0x140,
  CB_LIMITTEXT = 0x141,
  CB_SETEDITSEL = 0x142,
  CB_ADDSTRING = 0x143,
  CB_DELETESTRING = 0x144,
  CB_DIR = 0x145,
  CB_GETCOUNT = 0x146,
  CB_GETCURSEL = 0x147,
  CB_GETLBTEXT = 0x148,
  CB_GETLBTEXTLEN = 0x149,
  CB_INSERTSTRING = 0x14A,
  CB_RESETCONTENT = 0x14B,
  CB_FINDSTRING = 0x14C,
  CB_SELECTSTRING = 0x14D,
  CB_SETCURSEL = 0x14E,
  CB_SHOWDROPDOWN = 0x14F,
  CB_GETITEMDATA = 0x150,
  CB_SETITEMDATA = 0x151,
  CB_GETDROPPEDCONTROLRECT = 0x152,
  CB_SETITEMHEIGHT = 0x153,
  CB_GETITEMHEIGHT = 0x154,
  CB_SETEXTENDEDUI = 0x155,
  CB_GETEXTENDEDUI = 0x156,
  CB_GETDROPPEDSTATE = 0x157,
  CB_FINDSTRINGEXACT = 0x158,
  CB_SETLOCALE = 0x159,
  CB_GETLOCALE = 0x15A,
  CB_GETTOPINDEX = 0x15B,
  CB_SETTOPINDEX = 0x15C,
  CB_GETHORIZONTALEXTENT = 0x15D,
  CB_SETHORIZONTALEXTENT = 0x15E,
  CB_GETDROPPEDWIDTH = 0x15F,
  CB_SETDROPPEDWIDTH = 0x160,
  CB_INITSTORAGE = 0x161,
  CB_GETCOMBOBOXINFO = 0x164,
  STM_SETICON = 0x170,
  STM_GETICON = 0x171,
  STM_SETIMAGE = 0x172,
  STM_GETIMAGE = 0x173,
  LB_ADDSTRING = 0x180,
  LB_INSERTSTRING = 0x181,
  LB_DELETESTRING = 0x182,
  LB_SELITEMRANGEEX = 0x183,
  LB_RESETCONTENT = 0x184,
  LB_SETSEL = 0x185,
  LB_SETCURSEL = 0x186,
  LB_GETSEL = 0x187,
  LB_GETCURSEL = 0x188,
  LB_GETTEXT = 0x189,
  LB_GETTEXTLEN = 0x18A,
  LB_GETCOUNT = 0x18B,
  LB_SELECTSTRING = 0x18C,
  LB_DIR = 0x18D,
  LB_GETTOPINDEX = 0x18E,
  LB_FINDSTRING = 0x18F,
  LB_GETSELCOUNT = 0x190,
  LB_GETSELITEMS = 0x191,
  LB_SETTABSTOPS = 0x192,
  LB_GETHORIZONTALEXTENT = 0x193,
  LB_SETHORIZONTALEXTENT = 0x194,
  LB_SETCOLUMNWIDTH = 0x195,
  LB_ADDFILE = 0x196,
  LB_SETTOPINDEX = 0x197,
  LB_GETITEMRECT = 0x198,
  LB_GETITEMDATA = 0x199,
  LB_SETITEMDATA = 0x19A,
  LB_SELITEMRANGE = 0x19B,
  LB_SETANCHORINDEX = 0x19C,
  LB_GETANCHORINDEX = 0x19D,
  LB_SETCARETINDEX = 0x19E,
  LB_GETCARETINDEX = 0x19F,
  LB_SETITEMHEIGHT = 0x1A0,
  LB_GETITEMHEIGHT = 0x1A1,
  LB_FINDSTRINGEXACT = 0x1A2,
  LBCB_CARETON = 0x1A3,
  LBCB_CARETOFF = 0x1A4,
  LB_SETLOCALE = 0x1A5,
  LB_GETLOCALE = 0x1A6,
  LB_SETCOUNT = 0x1A7,
  LB_INITSTORAGE = 0x1A8,
  LB_ITEMFROMPOINT = 0x1A9,
  LB_INSERTSTRINGUPPER = 0x1AA,
  LB_INSERTSTRINGLOWER = 0x1AB,
  LB_ADDSTRINGUPPER = 0x1AC,
  LB_ADDSTRINGLOWER = 0x1AD,
  LB_GETLISTBOXINFO = 0x1B2,
  MN_SETHMENU = 0x1E0,
  MN_GETHMENU = 0x1E1,
  MN_SIZEWINDOW = 0x1E2,
  MN_OPENHIERARCHY = 0x1E3,
  MN_CLOSEHIERARCHY = 0x1E4,
  MN_SELECTITEM = 0x1E5,
  MN_CANCELMENUS = 0x1E6,
  MN_SELECTFIRSTVALIDITEM = 0x1E7,
  MN_GETPPOPUPMENU = 0x1EA,
  MN_FINDMENUWINDOWFROMPOINT = 0x1EB,
  MN_SHOWPOPUPWINDOW = 0x1EC,
  MN_BUTTONDOWN = 0x1ED,
  MN_MOUSEMOVE = 0x1EE,
  MN_BUTTONUP = 0x1EF,
  MN_SETTIMERTOOPENHIERARCHY = 0x1F0,
  MN_DBLCLK = 0x1F1,
  WM_MOUSEFIRST = 0x200,
  WM_MOUSEMOVE = 0x200,
  WM_LBUTTONDOWN = 0x201,
  WM_LBUTTONUP = 0x202,
  WM_LBUTTONDBLCLK = 0x203,
  WM_RBUTTONDOWN = 0x204,
  WM_RBUTTONUP = 0x205,
  WM_RBUTTONDBLCLK = 0x206,
  WM_MBUTTONDOWN = 0x207,
  WM_MBUTTONUP = 0x208,
  WM_MBUTTONDBLCLK = 0x209,
  WM_MOUSEWHEEL = 0x20A,
  WM_XBUTTONDOWN = 0x20B,
  WM_XBUTTONUP = 0x20C,
  WM_XBUTTONDBLCLK = 0x20D,
  WM_MOUSELAST = 0x20D,
  WM_PARENTNOTIFY = 0x210,
  WM_ENTERMENULOOP = 0x211,
  WM_EXITMENULOOP = 0x212,
  WM_NEXTMENU = 0x213,
  WM_SIZING = 0x214,
  WM_CAPTURECHANGED = 0x215,
  WM_MOVING = 0x216,
  WM_POWERBROADCAST = 0x218,
  WM_DEVICECHANGE = 0x219,
  WM_MDICREATE = 0x220,
  WM_MDIDESTROY = 0x221,
  WM_MDIACTIVATE = 0x222,
  WM_MDIRESTORE = 0x223,
  WM_MDINEXT = 0x224,
  WM_MDIMAXIMIZE = 0x225,
  WM_MDITILE = 0x226,
  WM_MDICASCADE = 0x227,
  WM_MDIICONARRANGE = 0x228,
  WM_MDIGETACTIVE = 0x229,
  WM_DROPOBJECT = 0x22A,
  WM_QUERYDROPOBJECT = 0x22B,
  WM_BEGINDRAG = 0x22C,
  WM_DRAGLOOP = 0x22D,
  WM_DRAGSELECT = 0x22E,
  WM_DRAGMOVE = 0x22F,
  WM_MDISETMENU = 0x230,
  WM_ENTERSIZEMOVE = 0x231,
  WM_EXITSIZEMOVE = 0x232,
  WM_DROPFILES = 0x233,
  WM_MDIREFRESHMENU = 0x234,
  WM_HANGEULFIRST = 0x280,
  WM_KANJIFIRST = 0x280,
  WM_IME_SETCONTEXT = 0x281,
  WM_IME_NOTIFY = 0x282,
  WM_IME_CONTROL = 0x283,
  WM_IME_COMPOSITIONFULL = 0x284,
  WM_IME_SELECT = 0x285,
  WM_IME_CHAR = 0x286,
  WM_IME_SYSTEM = 0x287,
  WM_IME_REQUEST = 0x288,
  WM_IME_KEYDOWN = 0x290,
  WM_IME_KEYUP = 0x291,
  WM_HANGEULLAST = 0x29F,
  WM_KANJILAST = 0x29F,
  WM_NCMOUSEHOVER = 0x2A0,
  WM_MOUSEHOVER = 0x2A1,
  WM_NCMOUSELEAVE = 0x2A2,
  WM_MOUSELEAVE = 0x2A3,
  WM_TRACKMOUSEEVENT_LAST = 0x2AF,
  WM_WTSSESSION_CHANGE = 0x2B1,
  WM_TABLET_FIRST = 0x2C0,
  WM_TABLET_LAST = 0x2DF,
  WM_CUT = 0x300,
  WM_COPY = 0x301,
  WM_PASTE = 0x302,
  WM_CLEAR = 0x303,
  WM_UNDO = 0x304,
  WM_RENDERFORMAT = 0x305,
  WM_RENDERALLFORMATS = 0x306,
  WM_DESTROYCLIPBOARD = 0x307,
  WM_DRAWCLIPBOARD = 0x308,
  WM_PAINTCLIPBOARD = 0x309,
  WM_VSCROLLCLIPBOARD = 0x30A,
  WM_SIZECLIPBOARD = 0x30B,
  WM_ASKCBFORMATNAME = 0x30C,
  WM_CHANGECBCHAIN = 0x30D,
  WM_HSCROLLCLIPBOARD = 0x30E,
  WM_QUERYNEWPALETTE = 0x30F,
  WM_PALETTEISCHANGING = 0x310,
  WM_PALETTECHANGED = 0x311,
  WM_HOTKEY = 0x312,
  WM_SYSMENU = 0x313,
  WM_HOOKMSG = 0x314,
  WM_EXITPROCESS = 0x315,
  WM_WAKETHREAD = 0x316,
  WM_PRINT = 0x317,
  WM_PRINTCLIENT = 0x318,
  WM_APPCOMMAND = 0x319,
  WM_THEMECHANGED = 0x31A,
  WM_HANDHELDFIRST = 0x358,
  WM_HANDHELDLAST = 0x35F,
  WM_AFXFIRST = 0x360,
  WM_AFXLAST = 0x37F,
  WM_PENWINFIRST = 0x380,
  WM_PENWINLAST = 0x38F,
  WM_INTERNAL_COALESCE_FIRST = 0x390,
  WM_COALESCE_FIRST = 0x390,
  WM_COALESCE_LAST = 0x39F,
  WM_MM_RESERVED_FIRST = 0x3A0,
  WM_MM_RESERVED_LAST = 0x3DF,
  WM_DDE_INITIATE = 0x3E0,
  WM_DDE_TERMINATE = 0x3E1,
  WM_DDE_ADVISE = 0x3E2,
  WM_DDE_UNADVISE = 0x3E3,
  WM_DDE_ACK = 0x3E4,
  WM_DDE_DATA = 0x3E5,
  WM_DDE_REQUEST = 0x3E6,
  WM_DDE_POKE = 0x3E7,
  WM_DDE_EXECUTE = 0x3E8,
  WM_DBNOTIFICATION = 0x3FD,
  WM_NETCONNECT = 0x3FE,
  WM_HIBERNATE = 0x3FF,
  WM_USER = 0x400,
  WM_APP = 0x8000,
};

/* 111 */
enum MACRO_GCL
{
  GCL_MENUNAME = -8,
  GCL_HBRBACKGROUND = -10,
  GCL_HCURSOR = -12,
  GCL_HICON = -14,
  GCL_HMODULE = -16,
  GCL_CBWNDEXTRA = -18,
  GCL_CBCLSEXTRA = -20,
  GCL_WNDPROC = -24,
  GCL_STYLE = -26,
  GCW_ATOM = -32,
  GCL_HICONSM = -34,
  GCLP_MENUNAME = -8,
};

/* 112 */
enum MACRO_SW_MAXIMIZE
{
  SW_MAXIMIZE = 3,
  SW_SHOWNOACTIVATE = 4,
  SW_SHOW = 5,
  SW_MINIMIZE = 6,
  SW_SHOWMINNOACTIVE = 7,
  SW_SHOWNA = 8,
  SW_RESTORE = 9,
  SW_SHOWDEFAULT = 10,
  SW_FORCEMINIMIZE = 11,
};

/* 113 */
#pragma pack(push, 1)
struct T_Unit
{
  __int16 X;
  __int16 Y;
  __int16 Attributes;
  char UnitType;
  char CivIndex;
  char MovePoints;
  char field_9;
  char field_A;
  char MoveDirection;
  char field_C;
  char Counter;
  char field_E;
  char Orders;
  char HomeCity;
  char field_11;
  __int16 GotoX;
  __int16 GotoY;
  __int16 PrevInStack;
  __int16 NextInStack;
  int ID;
  __int16 field_1E;
};
#pragma pack(pop)

/* 114 */
typedef T_CitySpritesInfo *P_CitySpritesInfo;

/* 115 */
typedef T_CityWindow *P_CityWindow;

/* 116 */
enum MACRO_VK
{
  VK_LBUTTON = 0x1,
  VK_RBUTTON = 0x2,
  VK_CANCEL = 0x3,
  VK_MBUTTON = 0x4,
  VK_BACK = 0x8,
  VK_TAB = 0x9,
  VK_CLEAR = 0xC,
  VK_RETURN = 0xD,
  VK_SHIFT = 0x10,
  VK_CONTROL = 0x11,
  VK_MENU = 0x12,
  VK_PAUSE = 0x13,
  VK_CAPITAL = 0x14,
  VK_KANA = 0x15,
  VK_HANGEUL = 0x15,
  VK_HANGUL = 0x15,
  VK_JUNJA = 0x17,
  VK_FINAL = 0x18,
  VK_HANJA = 0x19,
  VK_KANJI = 0x19,
  VK_ESCAPE = 0x1B,
  VK_CONVERT = 0x1C,
  VK_NONCONVERT = 0x1D,
  VK_ACCEPT = 0x1E,
  VK_MODECHANGE = 0x1F,
  VK_SPACE = 0x20,
  VK_PRIOR = 0x21,
  VK_NEXT = 0x22,
  VK_END = 0x23,
  VK_HOME = 0x24,
  VK_LEFT = 0x25,
  VK_UP = 0x26,
  VK_RIGHT = 0x27,
  VK_DOWN = 0x28,
  VK_SELECT = 0x29,
  VK_PRINT = 0x2A,
  VK_EXECUTE = 0x2B,
  VK_SNAPSHOT = 0x2C,
  VK_INSERT = 0x2D,
  VK_DELETE = 0x2E,
  VK_HELP = 0x2F,
  VK_LWIN = 0x5B,
  VK_RWIN = 0x5C,
  VK_APPS = 0x5D,
  VK_NUMPAD0 = 0x60,
  VK_NUMPAD1 = 0x61,
  VK_NUMPAD2 = 0x62,
  VK_NUMPAD3 = 0x63,
  VK_NUMPAD4 = 0x64,
  VK_NUMPAD5 = 0x65,
  VK_NUMPAD6 = 0x66,
  VK_NUMPAD7 = 0x67,
  VK_NUMPAD8 = 0x68,
  VK_NUMPAD9 = 0x69,
  VK_MULTIPLY = 0x6A,
  VK_ADD = 0x6B,
  VK_SEPARATOR = 0x6C,
  VK_SUBTRACT = 0x6D,
  VK_DECIMAL = 0x6E,
  VK_DIVIDE = 0x6F,
  VK_F1 = 0x70,
  VK_F2 = 0x71,
  VK_F3 = 0x72,
  VK_F4 = 0x73,
  VK_F5 = 0x74,
  VK_F6 = 0x75,
  VK_F7 = 0x76,
  VK_F8 = 0x77,
  VK_F9 = 0x78,
  VK_F10 = 0x79,
  VK_F11 = 0x7A,
  VK_F12 = 0x7B,
  VK_F13 = 0x7C,
  VK_F14 = 0x7D,
  VK_F15 = 0x7E,
  VK_F16 = 0x7F,
  VK_F17 = 0x80,
  VK_F18 = 0x81,
  VK_F19 = 0x82,
  VK_F20 = 0x83,
  VK_F21 = 0x84,
  VK_F22 = 0x85,
  VK_F23 = 0x86,
  VK_F24 = 0x87,
  VK_NUMLOCK = 0x90,
  VK_SCROLL = 0x91,
  VK_LSHIFT = 0xA0,
  VK_RSHIFT = 0xA1,
  VK_LCONTROL = 0xA2,
  VK_RCONTROL = 0xA3,
  VK_LMENU = 0xA4,
  VK_RMENU = 0xA5,
  VK_PROCESSKEY = 0xE5,
  VK_ATTN = 0xF6,
  VK_CRSEL = 0xF7,
  VK_EXSEL = 0xF8,
  VK_EREOF = 0xF9,
  VK_PLAY = 0xFA,
  VK_ZOOM = 0xFB,
  VK_NONAME = 0xFC,
  VK_PA1 = 0xFD,
  VK_OEM_CLEAR = 0xFE,
  WH_MIN = 0xFFFFFFFF,
};

/* 117 */
enum MACRO_SB_HORZ
{
  SB_HORZ = 0,
  SB_VERT = 1,
  SB_CTL = 2,
  SB_BOTH = 3,
};

/* 118 */
enum MACRO_WS
{
  WS_OVERLAPPED = 0x0,
  WS_POPUP = 0x80000000,
  WS_CHILD = 0x40000000,
  WS_MINIMIZE = 0x20000000,
  WS_VISIBLE = 0x10000000,
  WS_DISABLED = 0x8000000,
  WS_CLIPSIBLINGS = 0x4000000,
  WS_CLIPCHILDREN = 0x2000000,
  WS_MAXIMIZE = 0x1000000,
  WS_CAPTION = 0xC00000,
  WS_BORDER = 0x800000,
  WS_DLGFRAME = 0x400000,
  WS_VSCROLL = 0x200000,
  WS_HSCROLL = 0x100000,
  WS_SYSMENU = 0x80000,
  WS_THICKFRAME = 0x40000,
  WS_GROUP = 0x20000,
  WS_TABSTOP = 0x10000,
  WS_MINIMIZEBOX = 0x20000,
  WS_MAXIMIZEBOX = 0x10000,
  WS_TILED = 0x0,
  WS_ICONIC = 0x20000000,
  WS_SIZEBOX = 0x40000,
  WS_OVERLAPPEDWINDOW = 0xCF0000,
  WS_POPUPWINDOW = 0x80880000,
  WS_CHILDWINDOW = 0x40000000,
};

/* 119 */
enum MACRO_GWL
{
  GWL_WNDPROC = -4,
  GWL_HINSTANCE = -6,
  GWL_HWNDPARENT = -8,
  GWL_STYLE = -16,
  GWL_EXSTYLE = -20,
  GWL_USERDATA = -21,
  GWL_ID = -12,
};

/* 120 */
typedef T_Unit T_Units[2048];

/* 121 */
enum MACRO_FW
{
  FW_DONTCARE = 0,
  FW_THIN = 100,
  FW_EXTRALIGHT = 200,
  FW_LIGHT = 300,
  FW_NORMAL = 400,
  FW_MEDIUM = 500,
  FW_SEMIBOLD = 600,
  FW_BOLD = 700,
  FW_EXTRABOLD = 800,
  FW_HEAVY = 900,
};

/* 122 */
enum MACRO_MCIERR
{
  MCIERR_INVALID_DEVICE_ID = 257,
  MCIERR_UNRECOGNIZED_KEYWORD = 259,
  MCIERR_UNRECOGNIZED_COMMAND = 261,
  MCIERR_HARDWARE = 262,
  MCIERR_INVALID_DEVICE_NAME = 263,
  MCIERR_OUT_OF_MEMORY = 264,
  MCIERR_DEVICE_OPEN = 265,
  MCIERR_CANNOT_LOAD_DRIVER = 266,
  MCIERR_MISSING_COMMAND_STRING = 267,
  MCIERR_PARAM_OVERFLOW = 268,
  MCIERR_MISSING_STRING_ARGUMENT = 269,
  MCIERR_BAD_INTEGER = 270,
  MCIERR_PARSER_INTERNAL = 271,
  MCIERR_DRIVER_INTERNAL = 272,
  MCIERR_MISSING_PARAMETER = 273,
  MCIERR_UNSUPPORTED_FUNCTION = 274,
  MCIERR_FILE_NOT_FOUND = 275,
  MCIERR_DEVICE_NOT_READY = 276,
  MCIERR_INTERNAL = 277,
  MCIERR_DRIVER = 278,
  MCIERR_CANNOT_USE_ALL = 279,
  MCIERR_MULTIPLE = 280,
  MCIERR_EXTENSION_NOT_FOUND = 281,
  MCIERR_OUTOFRANGE = 282,
  MCIERR_FLAGS_NOT_COMPATIBLE = 284,
  MCIERR_FILE_NOT_SAVED = 286,
  MCIERR_DEVICE_TYPE_REQUIRED = 287,
  MCIERR_DEVICE_LOCKED = 288,
  MCIERR_DUPLICATE_ALIAS = 289,
  MCIERR_BAD_CONSTANT = 290,
  MCIERR_MUST_USE_SHAREABLE = 291,
  MCIERR_MISSING_DEVICE_NAME = 292,
  MCIERR_BAD_TIME_FORMAT = 293,
  MCIERR_NO_CLOSING_QUOTE = 294,
  MCIERR_DUPLICATE_FLAGS = 295,
  MCIERR_INVALID_FILE = 296,
  MCIERR_NULL_PARAMETER_BLOCK = 297,
  MCIERR_UNNAMED_RESOURCE = 298,
  MCIERR_NEW_REQUIRES_ALIAS = 299,
  MCIERR_NOTIFY_ON_AUTO_OPEN = 300,
  MCIERR_NO_ELEMENT_ALLOWED = 301,
  MCIERR_NONAPPLICABLE_FUNCTION = 302,
  MCIERR_ILLEGAL_FOR_AUTO_OPEN = 303,
  MCIERR_FILENAME_REQUIRED = 304,
  MCIERR_EXTRA_CHARACTERS = 305,
  MCIERR_DEVICE_NOT_INSTALLED = 306,
  MCIERR_GET_CD = 307,
  MCIERR_SET_CD = 308,
  MCIERR_SET_DRIVE = 309,
  MCIERR_DEVICE_LENGTH = 310,
  MCIERR_DEVICE_ORD_LENGTH = 311,
  MCIERR_NO_INTEGER = 312,
  MCIERR_WAVE_OUTPUTSINUSE = 320,
  MCIERR_WAVE_SETOUTPUTINUSE = 321,
  MCIERR_WAVE_INPUTSINUSE = 322,
  MCIERR_WAVE_SETINPUTINUSE = 323,
  MCIERR_WAVE_OUTPUTUNSPECIFIED = 324,
  MCIERR_WAVE_INPUTUNSPECIFIED = 325,
  MCIERR_WAVE_OUTPUTSUNSUITABLE = 326,
  MCIERR_WAVE_SETOUTPUTUNSUITABLE = 327,
  MCIERR_WAVE_INPUTSUNSUITABLE = 328,
  MCIERR_WAVE_SETINPUTUNSUITABLE = 329,
  MCIERR_SEQ_DIV_INCOMPATIBLE = 336,
  MCIERR_SEQ_PORT_INUSE = 337,
  MCIERR_SEQ_PORT_NONEXISTENT = 338,
  MCIERR_SEQ_PORT_MAPNODEVICE = 339,
  MCIERR_SEQ_PORT_MISCERROR = 340,
  MCIERR_SEQ_TIMER = 341,
  MCIERR_SEQ_PORTUNSPECIFIED = 342,
  MCIERR_SEQ_NOMIDIPRESENT = 343,
  MCIERR_NO_WINDOW = 346,
  MCIERR_CREATEWINDOW = 347,
  MCIERR_FILE_READ = 348,
  MCIERR_FILE_WRITE = 349,
  MCIERR_NO_IDENTITY = 350,
  MCIERR_CUSTOM_DRIVER_BASE = 512,
  MCI_FIRST = 2048,
  MCI_OPEN = 2051,
  MCI_CLOSE = 2052,
  MCI_ESCAPE = 2053,
  MCI_PLAY = 2054,
  MCI_SEEK = 2055,
  MCI_STOP = 2056,
  MCI_PAUSE = 2057,
  MCI_INFO = 2058,
  MCI_GETDEVCAPS = 2059,
  MCI_SPIN = 2060,
  MCI_SET = 2061,
  MCI_STEP = 2062,
  MCI_RECORD = 2063,
  MCI_SYSINFO = 2064,
  MCI_BREAK = 2065,
  MCI_SAVE = 2067,
  MCI_STATUS = 2068,
  MCI_CUE = 2096,
  MCI_REALIZE = 2112,
  MCI_WINDOW = 2113,
  MCI_PUT = 2114,
  MCI_WHERE = 2115,
  MCI_FREEZE = 2116,
  MCI_UNFREEZE = 2117,
  MCI_LOAD = 2128,
  MCI_CUT = 2129,
  MCI_COPY = 2130,
  MCI_PASTE = 2131,
  MCI_UPDATE = 2132,
  MCI_RESUME = 2133,
  MCI_DELETE = 2134,
  MCI_USER_MESSAGES = 3072,
  MCI_LAST = 4095,
  MCI_ALL_DEVICE_ID = -1,
};

/* 123 */
enum MACRO_MM_JOY1MOVE
{
  MM_JOY1MOVE = 0x3A0,
  MM_JOY2MOVE = 0x3A1,
  MM_JOY1ZMOVE = 0x3A2,
  MM_JOY2ZMOVE = 0x3A3,
  MM_JOY1BUTTONDOWN = 0x3B5,
  MM_JOY2BUTTONDOWN = 0x3B6,
  MM_JOY1BUTTONUP = 0x3B7,
  MM_JOY2BUTTONUP = 0x3B8,
  MM_MCINOTIFY = 0x3B9,
  MM_WOM_OPEN = 0x3BB,
  MM_WOM_CLOSE = 0x3BC,
  MM_WOM_DONE = 0x3BD,
  MM_WIM_OPEN = 0x3BE,
  MM_WIM_CLOSE = 0x3BF,
  MM_WIM_DATA = 0x3C0,
  MM_MIM_OPEN = 0x3C1,
  MM_MIM_CLOSE = 0x3C2,
  MM_MIM_DATA = 0x3C3,
  MM_MIM_LONGDATA = 0x3C4,
  MM_MIM_ERROR = 0x3C5,
  MM_MIM_LONGERROR = 0x3C6,
  MM_MOM_OPEN = 0x3C7,
  MM_MOM_CLOSE = 0x3C8,
  MM_MOM_DONE = 0x3C9,
  MM_DRVM_OPEN = 0x3D0,
  MM_DRVM_CLOSE = 0x3D1,
  MM_DRVM_DATA = 0x3D2,
  MM_DRVM_ERROR = 0x3D3,
  MM_STREAM_OPEN = 0x3D4,
  MM_STREAM_CLOSE = 0x3D5,
  MM_STREAM_DONE = 0x3D6,
  MM_STREAM_ERROR = 0x3D7,
};

/* 124 */
typedef _GUID GUID;

/* 125 */
struct _GUID
{
  unsigned __int32 Data1;
  unsigned __int16 Data2;
  unsigned __int16 Data3;
  unsigned __int8 Data4[8];
};

/* 126 */
struct _EH4_SCOPETABLE_RECORD
{
  int EnclosingLevel;
  void *FilterFunc;
  void *HandlerFunc;
};

/* 127 */
struct _EH4_SCOPETABLE
{
  DWORD GSCookieOffset;
  DWORD GSCookieXOROffset;
  DWORD EHCookieOffset;
  DWORD EHCookieXOROffset;
  struct _EH4_SCOPETABLE_RECORD ScopeRecord[];
};

/* 128 */
typedef tagMSG MSG;

/* 130 */
typedef _RTL_CRITICAL_SECTION_DEBUG *PRTL_CRITICAL_SECTION_DEBUG;

/* 134 */
typedef unsigned __int32 ULONG_PTR;

/* 129 */
#pragma pack(push, 8)
struct _RTL_CRITICAL_SECTION
{
  PRTL_CRITICAL_SECTION_DEBUG DebugInfo;
  LONG LockCount;
  LONG RecursionCount;
  HANDLE OwningThread;
  HANDLE LockSemaphore;
  ULONG_PTR SpinCount;
};
#pragma pack(pop)

/* 133 */
struct _LIST_ENTRY
{
  _LIST_ENTRY *Flink;
  _LIST_ENTRY *Blink;
};

/* 132 */
typedef _LIST_ENTRY LIST_ENTRY;

/* 131 */
struct _RTL_CRITICAL_SECTION_DEBUG
{
  WORD Type;
  WORD CreatorBackTraceIndex;
  struct _RTL_CRITICAL_SECTION_DEBUG::_RTL_CRITICAL_SECTION *CriticalSection;
  LIST_ENTRY ProcessLocksList;
  DWORD EntryCount;
  DWORD ContentionCount;
  DWORD Flags;
  WORD CreatorBackTraceIndexHigh;
  WORD SpareWORD;
};

/* 137 */
struct _SYSTEM_INFO::$058745E319A46827965CDE7F37238831::$AA04DEB0C6383F89F13D312A174572A9
{
  WORD wProcessorArchitecture;
  WORD wReserved;
};

/* 136 */
union _SYSTEM_INFO::$058745E319A46827965CDE7F37238831
{
  DWORD dwOemId;
  _SYSTEM_INFO::$058745E319A46827965CDE7F37238831::$AA04DEB0C6383F89F13D312A174572A9 s;
};

/* 138 */
typedef ULONG_PTR DWORD_PTR;

/* 135 */
struct _SYSTEM_INFO
{
  _SYSTEM_INFO::$058745E319A46827965CDE7F37238831 u;
  DWORD dwPageSize;
  LPVOID lpMinimumApplicationAddress;
  LPVOID lpMaximumApplicationAddress;
  DWORD_PTR dwActiveProcessorMask;
  DWORD dwNumberOfProcessors;
  DWORD dwProcessorType;
  DWORD dwAllocationGranularity;
  WORD wProcessorLevel;
  WORD wProcessorRevision;
};

/* 139 */
typedef _MIDL_STUB_DESC MIDL_STUB_DESC;

/* 141 */
typedef unsigned int size_t;

/* 145 */
typedef void *I_RPC_HANDLE;

/* 144 */
typedef I_RPC_HANDLE RPC_BINDING_HANDLE;

/* 143 */
typedef RPC_BINDING_HANDLE handle_t;

/* 146 */
typedef __GENERIC_BINDING_INFO *PGENERIC_BINDING_INFO;

/* 142 */
#pragma pack(push, 8)
union _MIDL_STUB_DESC::$5BCB627D3738D8B5DEACC268C24AE672
{
  handle_t *pAutoHandle;
  handle_t *pPrimitiveHandle;
  PGENERIC_BINDING_INFO pGenericBindingInfo;
};
#pragma pack(pop)

/* 150 */
typedef void (__stdcall *NDR_RUNDOWN)(void *context);

/* 151 */
typedef _GENERIC_BINDING_ROUTINE_PAIR GENERIC_BINDING_ROUTINE_PAIR;

/* 153 */
typedef void (__stdcall *EXPR_EVAL)(_MIDL_STUB_MESSAGE *);

/* 174 */
typedef _XMIT_ROUTINE_QUINTUPLE XMIT_ROUTINE_QUINTUPLE;

/* 178 */
typedef _MALLOC_FREE_STRUCT MALLOC_FREE_STRUCT;

/* 180 */
typedef _COMM_FAULT_OFFSETS COMM_FAULT_OFFSETS;

/* 182 */
typedef _USER_MARSHAL_ROUTINE_QUADRUPLE USER_MARSHAL_ROUTINE_QUADRUPLE;

/* 188 */
typedef void (__stdcall *NDR_NOTIFY_ROUTINE)();

/* 189 */
typedef _NDR_CS_ROUTINES NDR_CS_ROUTINES;

/* 202 */
typedef _NDR_EXPR_DESC NDR_EXPR_DESC;

/* 140 */
#pragma pack(push, 8)
struct _MIDL_STUB_DESC
{
  void *RpcInterfaceInformation;
  void *(__stdcall *pfnAllocate)(size_t);
  void (__stdcall *pfnFree)(void *);
  _MIDL_STUB_DESC::$5BCB627D3738D8B5DEACC268C24AE672 IMPLICIT_HANDLE_INFO;
  const NDR_RUNDOWN *apfnNdrRundownRoutines;
  const GENERIC_BINDING_ROUTINE_PAIR *aGenericBindingRoutinePairs;
  const EXPR_EVAL *apfnExprEval;
  const XMIT_ROUTINE_QUINTUPLE *aXmitQuintuple;
  const unsigned __int8 *pFormatTypes;
  int fCheckBounds;
  unsigned __int32 Version;
  MALLOC_FREE_STRUCT *pMallocFreeStruct;
  __int32 MIDLVersion;
  const COMM_FAULT_OFFSETS *CommFaultOffsets;
  const USER_MARSHAL_ROUTINE_QUADRUPLE *aUserMarshalQuadruple;
  const NDR_NOTIFY_ROUTINE *NotifyRoutineTable;
  ULONG_PTR mFlags;
  const NDR_CS_ROUTINES *CsRoutineTables;
  void *ProxyServerInfo;
  const NDR_EXPR_DESC *pExprInfo;
};
#pragma pack(pop)

/* 148 */
typedef void *(__stdcall *GENERIC_BINDING_ROUTINE)(void *);

/* 149 */
typedef void (__stdcall *GENERIC_UNBIND_ROUTINE)(void *, unsigned __int8 *);

/* 147 */
#pragma pack(push, 8)
struct __GENERIC_BINDING_INFO
{
  void *pObj;
  unsigned int Size;
  GENERIC_BINDING_ROUTINE pfnBind;
  GENERIC_UNBIND_ROUTINE pfnUnbind;
};
#pragma pack(pop)

/* 152 */
#pragma pack(push, 8)
struct _GENERIC_BINDING_ROUTINE_PAIR
{
  GENERIC_BINDING_ROUTINE pfnBind;
  GENERIC_UNBIND_ROUTINE pfnUnbind;
};
#pragma pack(pop)

/* 155 */
typedef _RPC_MESSAGE *PRPC_MESSAGE;

/* 161 */
struct NDR_ALLOC_ALL_NODES_CONTEXT;

/* 162 */
struct NDR_POINTER_QUEUE_STATE;

/* 166 */
typedef $3FA64165D15A4602C29B2D9B0DA4A5E9 *NDR_SCONTEXT;

/* 168 */
typedef $0F4C31D81B3E066615C27062B4195938 *PARRAY_INFO;

/* 170 */
typedef struct _NDR_ASYNC_MESSAGE *PNDR_ASYNC_MESSAGE;

/* 171 */
typedef struct _NDR_CORRELATION_INFO *PNDR_CORRELATION_INFO;

/* 172 */
typedef int INT_PTR;

/* 173 */
struct _NDR_PROC_CONTEXT;

/* 154 */
#pragma pack(push, 8)
struct _MIDL_STUB_MESSAGE
{
  PRPC_MESSAGE RpcMsg;
  unsigned __int8 *Buffer;
  unsigned __int8 *BufferStart;
  unsigned __int8 *BufferEnd;
  unsigned __int8 *BufferMark;
  unsigned __int32 BufferLength;
  unsigned __int32 MemorySize;
  unsigned __int8 *Memory;
  unsigned __int8 IsClient;
  unsigned __int8 Pad;
  unsigned __int16 uFlags2;
  int ReuseBuffer;
  NDR_ALLOC_ALL_NODES_CONTEXT *pAllocAllNodesContext;
  NDR_POINTER_QUEUE_STATE *pPointerQueueState;
  int IgnoreEmbeddedPointers;
  unsigned __int8 *PointerBufferMark;
  unsigned __int8 CorrDespIncrement;
  unsigned __int8 uFlags;
  unsigned __int16 UniquePtrCount;
  ULONG_PTR MaxCount;
  unsigned __int32 Offset;
  unsigned __int32 ActualCount;
  void *(__stdcall *pfnAllocate)(size_t);
  void (__stdcall *pfnFree)(void *);
  unsigned __int8 *StackTop;
  unsigned __int8 *pPresentedType;
  unsigned __int8 *pTransmitType;
  handle_t SavedHandle;
  const _MIDL_STUB_DESC *StubDesc;
  _FULL_PTR_XLAT_TABLES *FullPtrXlatTables;
  unsigned __int32 FullPtrRefId;
  unsigned __int32 PointerLength;
  __int32 fInDontFree : 1;
  __int32 fDontCallFreeInst : 1;
  __int32 fInOnlyParam : 1;
  __int32 fHasReturn : 1;
  __int32 fHasExtensions : 1;
  __int32 fHasNewCorrDesc : 1;
  __int32 fIsIn : 1;
  __int32 fIsOut : 1;
  __int32 fIsOicf : 1;
  __int32 fBufferValid : 1;
  __int32 fHasMemoryValidateCallback : 1;
  __int32 fInFree : 1;
  __int32 fNeedMCCP : 1;
  __int32 fUnused : 3;
  __int32 fUnused2 : 16;
  unsigned __int32 dwDestContext;
  void *pvDestContext;
  NDR_SCONTEXT *SavedContextHandles;
  __int32 ParamNumber;
  struct _MIDL_STUB_MESSAGE::IRpcChannelBuffer *pRpcChannelBuffer;
  PARRAY_INFO pArrayInfo;
  unsigned __int32 *SizePtrCountArray;
  unsigned __int32 *SizePtrOffsetArray;
  unsigned __int32 *SizePtrLengthArray;
  void *pArgQueue;
  unsigned __int32 dwStubPhase;
  void *LowStackMark;
  PNDR_ASYNC_MESSAGE pAsyncMsg;
  PNDR_CORRELATION_INFO pCorrInfo;
  unsigned __int8 *pCorrMemory;
  void *pMemoryList;
  INT_PTR pCSInfo;
  unsigned __int8 *ConformanceMark;
  unsigned __int8 *VarianceMark;
  INT_PTR Unused;
  _NDR_PROC_CONTEXT *pContext;
  void *ContextHandleHash;
  void *pUserMarshalList;
  INT_PTR Reserved51_3;
  INT_PTR Reserved51_4;
  INT_PTR Reserved51_5;
};
#pragma pack(pop)

/* 157 */
typedef _RPC_SYNTAX_IDENTIFIER *PRPC_SYNTAX_IDENTIFIER;

/* 156 */
struct _RPC_MESSAGE
{
  RPC_BINDING_HANDLE Handle;
  unsigned __int32 DataRepresentation;
  void *Buffer;
  unsigned int BufferLength;
  unsigned int ProcNum;
  PRPC_SYNTAX_IDENTIFIER TransferSyntax;
  void *RpcInterfaceInformation;
  void *ReservedForRuntime;
  void *ManagerEpv;
  void *ImportContext;
  unsigned __int32 RpcFlags;
};

/* 160 */
struct _RPC_VERSION
{
  unsigned __int16 MajorVersion;
  unsigned __int16 MinorVersion;
};

/* 159 */
typedef _RPC_VERSION RPC_VERSION;

/* 158 */
struct _RPC_SYNTAX_IDENTIFIER
{
  GUID SyntaxGUID;
  RPC_VERSION SyntaxVersion;
};

/* 165 */
enum $2A6324B8E10DEE2666A6A5498DFC667B
{
  XLAT_SERVER = 0x1,
  XLAT_CLIENT = 0x2,
};

/* 164 */
typedef $2A6324B8E10DEE2666A6A5498DFC667B XLAT_SIDE;

/* 163 */
#pragma pack(push, 8)
struct _FULL_PTR_XLAT_TABLES
{
  void *RefIdToPointer;
  void *PointerToRefId;
  unsigned __int32 NextRefId;
  XLAT_SIDE XlatSide;
};
#pragma pack(pop)

/* 167 */
#pragma pack(push, 8)
struct $3FA64165D15A4602C29B2D9B0DA4A5E9
{
  void *pad[2];
  void *userContext;
};
#pragma pack(pop)

/* 169 */
#pragma pack(push, 8)
struct $0F4C31D81B3E066615C27062B4195938
{
  __int32 Dimension;
  unsigned __int32 *BufferConformanceMark;
  unsigned __int32 *BufferVarianceMark;
  unsigned __int32 *MaxCountArray;
  unsigned __int32 *OffsetArray;
  unsigned __int32 *ActualCountArray;
};
#pragma pack(pop)

/* 177 */
typedef _MIDL_STUB_MESSAGE *PMIDL_STUB_MESSAGE;

/* 176 */
typedef void (__stdcall *XMIT_HELPER_ROUTINE)(PMIDL_STUB_MESSAGE);

/* 175 */
#pragma pack(push, 8)
struct _XMIT_ROUTINE_QUINTUPLE
{
  XMIT_HELPER_ROUTINE pfnTranslateToXmit;
  XMIT_HELPER_ROUTINE pfnTranslateFromXmit;
  XMIT_HELPER_ROUTINE pfnFreeXmit;
  XMIT_HELPER_ROUTINE pfnFreeInst;
};
#pragma pack(pop)

/* 179 */
#pragma pack(push, 8)
struct _MALLOC_FREE_STRUCT
{
  void *(__stdcall *pfnAllocate)(size_t);
  void (__stdcall *pfnFree)(void *);
};
#pragma pack(pop)

/* 181 */
#pragma pack(push, 8)
struct _COMM_FAULT_OFFSETS
{
  __int16 CommOffset;
  __int16 FaultOffset;
};
#pragma pack(pop)

/* 184 */
typedef unsigned __int32 (__stdcall *USER_MARSHAL_SIZING_ROUTINE)(unsigned __int32 *, unsigned __int32, void *);

/* 185 */
typedef unsigned __int8 *(__stdcall *USER_MARSHAL_MARSHALLING_ROUTINE)(unsigned __int32 *, unsigned __int8 *, void *);

/* 186 */
typedef unsigned __int8 *(__stdcall *USER_MARSHAL_UNMARSHALLING_ROUTINE)(unsigned __int32 *, unsigned __int8 *, void *);

/* 187 */
typedef void (__stdcall *USER_MARSHAL_FREEING_ROUTINE)(unsigned __int32 *, void *);

/* 183 */
#pragma pack(push, 8)
struct _USER_MARSHAL_ROUTINE_QUADRUPLE
{
  USER_MARSHAL_SIZING_ROUTINE pfnBufferSize;
  USER_MARSHAL_MARSHALLING_ROUTINE pfnMarshall;
  USER_MARSHAL_UNMARSHALLING_ROUTINE pfnUnmarshall;
  USER_MARSHAL_FREEING_ROUTINE pfnFree;
};
#pragma pack(pop)

/* 191 */
typedef _NDR_CS_SIZE_CONVERT_ROUTINES NDR_CS_SIZE_CONVERT_ROUTINES;

/* 196 */
typedef unsigned __int32 error_status_t;

/* 201 */
typedef void (__stdcall *CS_TAG_GETTING_ROUTINE)(RPC_BINDING_HANDLE hBinding, int fServerSide, unsigned __int32 *pulSendingTag, unsigned __int32 *pulDesiredReceivingTag, unsigned __int32 *pulReceivingTag, error_status_t *pStatus);

/* 190 */
#pragma pack(push, 8)
struct _NDR_CS_ROUTINES
{
  NDR_CS_SIZE_CONVERT_ROUTINES *pSizeConvertRoutines;
  CS_TAG_GETTING_ROUTINE *pTagGettingRoutines;
};
#pragma pack(pop)

/* 195 */
enum _IDL_CS_CONVERT
{
  IDL_CS_NO_CONVERT = 0x0,
  IDL_CS_IN_PLACE_CONVERT = 0x1,
  IDL_CS_NEW_BUFFER_CONVERT = 0x2,
};

/* 194 */
typedef _IDL_CS_CONVERT IDL_CS_CONVERT;

/* 193 */
typedef void (__stdcall *CS_TYPE_NET_SIZE_ROUTINE)(RPC_BINDING_HANDLE hBinding, unsigned __int32 ulNetworkCodeSet, unsigned __int32 ulLocalBufferSize, IDL_CS_CONVERT *conversionType, unsigned __int32 *pulNetworkBufferSize, error_status_t *pStatus);

/* 198 */
typedef unsigned __int8 byte;

/* 197 */
typedef void (__stdcall *CS_TYPE_TO_NETCS_ROUTINE)(RPC_BINDING_HANDLE hBinding, unsigned __int32 ulNetworkCodeSet, void *pLocalData, unsigned __int32 ulLocalDataLength, byte *pNetworkData, unsigned __int32 *pulNetworkDataLength, error_status_t *pStatus);

/* 199 */
typedef void (__stdcall *CS_TYPE_LOCAL_SIZE_ROUTINE)(RPC_BINDING_HANDLE hBinding, unsigned __int32 ulNetworkCodeSet, unsigned __int32 ulNetworkBufferSize, IDL_CS_CONVERT *conversionType, unsigned __int32 *pulLocalBufferSize, error_status_t *pStatus);

/* 200 */
typedef void (__stdcall *CS_TYPE_FROM_NETCS_ROUTINE)(RPC_BINDING_HANDLE hBinding, unsigned __int32 ulNetworkCodeSet, byte *pNetworkData, unsigned __int32 ulNetworkDataLength, unsigned __int32 ulLocalBufferSize, void *pLocalData, unsigned __int32 *pulLocalDataLength, error_status_t *pStatus);

/* 192 */
#pragma pack(push, 8)
struct _NDR_CS_SIZE_CONVERT_ROUTINES
{
  CS_TYPE_NET_SIZE_ROUTINE pfnNetSize;
  CS_TYPE_TO_NETCS_ROUTINE pfnToNetCs;
  CS_TYPE_LOCAL_SIZE_ROUTINE pfnLocalSize;
  CS_TYPE_FROM_NETCS_ROUTINE pfnFromNetCs;
};
#pragma pack(pop)

/* 204 */
typedef const unsigned __int8 *PFORMAT_STRING;

/* 203 */
#pragma pack(push, 8)
struct _NDR_EXPR_DESC
{
  const unsigned __int16 *pOffset;
  PFORMAT_STRING pFormatExpr;
};
#pragma pack(pop)

/* 205 */
#pragma pack(push, 1)
struct tagMIDIOUTCAPSW
{
  WORD wMid;
  WORD wPid;
  MMVERSION vDriverVersion;
  WCHAR szPname[32];
  WORD wTechnology;
  WORD wVoices;
  WORD wNotes;
  WORD wChannelMask;
  DWORD dwSupport;
};
#pragma pack(pop)

/* 206 */
struct _SERVICE_STATUS
{
  DWORD dwServiceType;
  DWORD dwCurrentState;
  DWORD dwControlsAccepted;
  DWORD dwWin32ExitCode;
  DWORD dwServiceSpecificExitCode;
  DWORD dwCheckPoint;
  DWORD dwWaitHint;
};

/* 207 */
#pragma pack(push, 1)
struct timecaps_tag
{
  UINT wPeriodMin;
  UINT wPeriodMax;
};
#pragma pack(pop)

/* 208 */
typedef _LARGE_INTEGER LARGE_INTEGER;

/* 210 */
struct _LARGE_INTEGER::$837407842DC9087486FDFA5FEB63B74E
{
  DWORD LowPart;
  LONG HighPart;
};

/* 211 */
typedef __int64 LONGLONG;

/* 209 */
union _LARGE_INTEGER
{
  _LARGE_INTEGER::$837407842DC9087486FDFA5FEB63B74E s;
  _LARGE_INTEGER::$837407842DC9087486FDFA5FEB63B74E u;
  LONGLONG QuadPart;
};

/* 212 */
#pragma pack(push, 1)
struct joyinfoex_tag
{
  DWORD dwSize;
  DWORD dwFlags;
  DWORD dwXpos;
  DWORD dwYpos;
  DWORD dwZpos;
  DWORD dwRpos;
  DWORD dwUpos;
  DWORD dwVpos;
  DWORD dwButtons;
  DWORD dwButtonNumber;
  DWORD dwPOV;
  DWORD dwReserved1;
  DWORD dwReserved2;
};
#pragma pack(pop)

/* 213 */
#pragma pack(push, 1)
struct joyinfo_tag
{
  UINT wXpos;
  UINT wYpos;
  UINT wZpos;
  UINT wButtons;
};
#pragma pack(pop)

/* 214 */
#pragma pack(push, 1)
struct tagJOYCAPSW
{
  WORD wMid;
  WORD wPid;
  WCHAR szPname[32];
  UINT wXmin;
  UINT wXmax;
  UINT wYmin;
  UINT wYmax;
  UINT wZmin;
  UINT wZmax;
  UINT wNumButtons;
  UINT wPeriodMin;
  UINT wPeriodMax;
  UINT wRmin;
  UINT wRmax;
  UINT wUmin;
  UINT wUmax;
  UINT wVmin;
  UINT wVmax;
  UINT wCaps;
  UINT wMaxAxes;
  UINT wNumAxes;
  UINT wMaxButtons;
  WCHAR szRegKey[32];
  WCHAR szOEMVxD[260];
};
#pragma pack(pop)

/* 215 */
#pragma pack(push, 1)
struct tagAUXCAPSW
{
  WORD wMid;
  WORD wPid;
  MMVERSION vDriverVersion;
  WCHAR szPname[32];
  WORD wTechnology;
  WORD wReserved1;
  DWORD dwSupport;
};
#pragma pack(pop)

/* 217 */
#pragma pack(push, 1)
struct tagMIXERLINEW::$9A19AF7771B1B870F9962D397CED60DA
{
  DWORD dwType;
  DWORD dwDeviceID;
  WORD wMid;
  WORD wPid;
  MMVERSION vDriverVersion;
  WCHAR szPname[32];
};
#pragma pack(pop)

/* 216 */
#pragma pack(push, 1)
struct tagMIXERLINEW
{
  DWORD cbStruct;
  DWORD dwDestination;
  DWORD dwSource;
  DWORD dwLineID;
  DWORD fdwLine;
  DWORD_PTR dwUser;
  DWORD dwComponentType;
  DWORD cChannels;
  DWORD cConnections;
  DWORD cControls;
  WCHAR szShortName[16];
  WCHAR szName[64];
  tagMIXERLINEW::$9A19AF7771B1B870F9962D397CED60DA Target;
};
#pragma pack(pop)

/* 219 */
#pragma pack(push, 1)
union tagMIXERLINECONTROLSW::$DC43C2837E8C20184C3137B308FBE3E1
{
  DWORD dwControlID;
  DWORD dwControlType;
};
#pragma pack(pop)

/* 220 */
typedef tagMIXERCONTROLW *LPMIXERCONTROLW;

/* 218 */
#pragma pack(push, 1)
struct tagMIXERLINECONTROLSW
{
  DWORD cbStruct;
  DWORD dwLineID;
  tagMIXERLINECONTROLSW::$DC43C2837E8C20184C3137B308FBE3E1 u;
  DWORD cControls;
  DWORD cbmxctrl;
  LPMIXERCONTROLW pamxctrl;
};
#pragma pack(pop)

/* 223 */
#pragma pack(push, 1)
struct tagMIXERCONTROLW::$069A335CC75AE0DC2EA5B25DFDE17037::$A9226EEFE738F03A3F7D52221D0941CC
{
  LONG lMinimum;
  LONG lMaximum;
};
#pragma pack(pop)

/* 224 */
#pragma pack(push, 1)
struct tagMIXERCONTROLW::$069A335CC75AE0DC2EA5B25DFDE17037::$A8262751543F154F80C41ED2519FD13B
{
  DWORD dwMinimum;
  DWORD dwMaximum;
};
#pragma pack(pop)

/* 222 */
#pragma pack(push, 1)
union tagMIXERCONTROLW::$069A335CC75AE0DC2EA5B25DFDE17037
{
  tagMIXERCONTROLW::$069A335CC75AE0DC2EA5B25DFDE17037::$A9226EEFE738F03A3F7D52221D0941CC s;
  tagMIXERCONTROLW::$069A335CC75AE0DC2EA5B25DFDE17037::$A8262751543F154F80C41ED2519FD13B s2;
  DWORD dwReserved[6];
};
#pragma pack(pop)

/* 225 */
#pragma pack(push, 1)
union tagMIXERCONTROLW::$AFA1D3B62FF5E28583F9FD43B125895E
{
  DWORD cSteps;
  DWORD cbCustomData;
  DWORD dwReserved[6];
};
#pragma pack(pop)

/* 221 */
#pragma pack(push, 1)
struct tagMIXERCONTROLW
{
  DWORD cbStruct;
  DWORD dwControlID;
  DWORD dwControlType;
  DWORD fdwControl;
  DWORD cMultipleItems;
  WCHAR szShortName[16];
  WCHAR szName[64];
  tagMIXERCONTROLW::$069A335CC75AE0DC2EA5B25DFDE17037 Bounds;
  tagMIXERCONTROLW::$AFA1D3B62FF5E28583F9FD43B125895E Metrics;
};
#pragma pack(pop)

/* 227 */
#pragma pack(push, 1)
union tMIXERCONTROLDETAILS::$6A354DB64043DD4C59D209C2C03EE69F
{
  HWND hwndOwner;
  DWORD cMultipleItems;
};
#pragma pack(pop)

/* 226 */
#pragma pack(push, 1)
struct tMIXERCONTROLDETAILS
{
  DWORD cbStruct;
  DWORD dwControlID;
  DWORD cChannels;
  tMIXERCONTROLDETAILS::$6A354DB64043DD4C59D209C2C03EE69F u;
  DWORD cbDetails;
  LPVOID paDetails;
};
#pragma pack(pop)

/* 228 */
#pragma pack(push, 1)
struct tagAUXCAPSA
{
  WORD wMid;
  WORD wPid;
  MMVERSION vDriverVersion;
  CHAR szPname[32];
  WORD wTechnology;
  WORD wReserved1;
  DWORD dwSupport;
};
#pragma pack(pop)

/* 229 */
#pragma pack(push, 1)
struct tagMIXERCAPSA
{
  WORD wMid;
  WORD wPid;
  MMVERSION vDriverVersion;
  CHAR szPname[32];
  DWORD fdwSupport;
  DWORD cDestinations;
};
#pragma pack(pop)

/* 231 */
#pragma pack(push, 1)
struct tagMIXERLINEA::$3F59E0B102B49F482C4A8B1440A7891E
{
  DWORD dwType;
  DWORD dwDeviceID;
  WORD wMid;
  WORD wPid;
  MMVERSION vDriverVersion;
  CHAR szPname[32];
};
#pragma pack(pop)

/* 230 */
#pragma pack(push, 1)
struct tagMIXERLINEA
{
  DWORD cbStruct;
  DWORD dwDestination;
  DWORD dwSource;
  DWORD dwLineID;
  DWORD fdwLine;
  DWORD_PTR dwUser;
  DWORD dwComponentType;
  DWORD cChannels;
  DWORD cConnections;
  DWORD cControls;
  CHAR szShortName[16];
  CHAR szName[64];
  tagMIXERLINEA::$3F59E0B102B49F482C4A8B1440A7891E Target;
};
#pragma pack(pop)

/* 232 */
#pragma pack(push, 1)
struct tagWAVEINCAPSA
{
  WORD wMid;
  WORD wPid;
  MMVERSION vDriverVersion;
  CHAR szPname[32];
  DWORD dwFormats;
  WORD wChannels;
  WORD wReserved1;
};
#pragma pack(pop)

/* 233 */
#pragma pack(push, 1)
struct tagMIDIOUTCAPSA
{
  WORD wMid;
  WORD wPid;
  MMVERSION vDriverVersion;
  CHAR szPname[32];
  WORD wTechnology;
  WORD wVoices;
  WORD wNotes;
  WORD wChannelMask;
  DWORD dwSupport;
};
#pragma pack(pop)

/* 234 */
#pragma pack(push, 1)
struct tagMIDIINCAPSA
{
  WORD wMid;
  WORD wPid;
  MMVERSION vDriverVersion;
  CHAR szPname[32];
  DWORD dwSupport;
};
#pragma pack(pop)

/* 237 */
typedef _EXCEPTION_RECORD EXCEPTION_RECORD;

/* 236 */
typedef EXCEPTION_RECORD *PEXCEPTION_RECORD;

/* 241 */
typedef _CONTEXT CONTEXT;

/* 240 */
typedef CONTEXT *PCONTEXT;

/* 235 */
struct _EXCEPTION_POINTERS
{
  PEXCEPTION_RECORD ExceptionRecord;
  PCONTEXT ContextRecord;
};

/* 238 */
struct _EXCEPTION_RECORD
{
  DWORD ExceptionCode;
  DWORD ExceptionFlags;
  _EXCEPTION_RECORD *ExceptionRecord;
  PVOID ExceptionAddress;
  DWORD NumberParameters;
  ULONG_PTR ExceptionInformation[15];
};

/* 244 */
struct _FLOATING_SAVE_AREA
{
  DWORD ControlWord;
  DWORD StatusWord;
  DWORD TagWord;
  DWORD ErrorOffset;
  DWORD ErrorSelector;
  DWORD DataOffset;
  DWORD DataSelector;
  BYTE RegisterArea[80];
  DWORD Cr0NpxState;
};

/* 243 */
typedef _FLOATING_SAVE_AREA FLOATING_SAVE_AREA;

/* 242 */
#pragma pack(push, 4)
struct _CONTEXT
{
  DWORD ContextFlags;
  DWORD Dr0;
  DWORD Dr1;
  DWORD Dr2;
  DWORD Dr3;
  DWORD Dr6;
  DWORD Dr7;
  FLOATING_SAVE_AREA FloatSave;
  DWORD SegGs;
  DWORD SegFs;
  DWORD SegEs;
  DWORD SegDs;
  DWORD Edi;
  DWORD Esi;
  DWORD Ebx;
  DWORD Edx;
  DWORD Ecx;
  DWORD Eax;
  DWORD Ebp;
  DWORD Eip;
  DWORD SegCs;
  DWORD EFlags;
  DWORD Esp;
  DWORD SegSs;
  BYTE ExtendedRegisters[512];
};
#pragma pack(pop)

/* 245 */
enum MACRO_MCI_NOTIFY
{
  MCI_NOTIFY_SUCCESSFUL = 0x1,
  MCI_NOTIFY_SUPERSEDED = 0x2,
  MCI_NOTIFY_ABORTED = 0x4,
  MCI_NOTIFY_FAILURE = 0x8,
};

/* 248 */
#pragma pack(push, 1)
struct T_Civ
{
  __int8 Unknown1;
  __int8 Unknown2;
  __int32 Gold;
  __int8 Unknown3;
  __int8 Unknown4;
  WORD Beakers;
  __int8 Unknown5[11];
  __int8 Government;
  __int8 Unknown6[1406];
};
#pragma pack(pop)

/* 247 */
typedef T_Civ T_Civs[7];

/* 249 */
#pragma pack(push, 1)
struct T_City
{
  __int16 X;
  __int16 Y;
  char byte_64F344;
  char unk_64F345;
  char byte_64F346;
  char byte_64F347;
  char Owner;
  char Size;
  char Founder;
  char TurnsCaptured;
  char byte_64F34C;
  char RevealedSize[9];
  int dword_64F356;
  __int16 word_64F35A;
  __int16 word_64F35C;
  __int16 word_64F35E;
  char Name[16];
  int dword_64F370;
  char byte_64F374[5];
  char byte_64F379;
  char byte_64F37A;
  char byte_64F37B;
  char byte_64F37C[2];
  char byte_64F37E;
  char byte_64F37F[2];
  char byte_64F381;
  char byte_64F382[2];
  __int16 word_64F384;
  __int16 word_64F386[2];
  __int16 word_64F38A;
  __int16 word_64F38C;
  __int16 word_64F38E;
  char byte_64F390;
  char byte_64F391;
  char byte_64F392;
  char byte_64F393;
  int ID;
};
#pragma pack(pop)

/* 250 */
typedef T_City T_Cities[64];

/* 262 */
typedef T_DrawInfo *P_DrawInfo;

/* 252 */
typedef tagSIZE SIZE;

/* 251 */
#pragma pack(push, 1)
struct T_GraphicsInfo
{
  char Unknown1[20];
  RECT ClientRectangle;
  RECT WindowRectangle;
  LONG SpriteArea;
  LONG Unknown3[2];
  P_DrawInfo DrawInfo;
  char Unknown4[4];
  T_WindowInfo WindowInfo;
  char Unknown5[24];
  POINT ClientTopLeft;
  SIZE ClientSize;
  char Unknown6[428];
  __int16 MapCenterX;
  __int16 MapCenterY;
  __int16 MapZoom;
  __int16 Unknown7;
  RECT MapRect;
  SIZE MapHalf;
  char Unknown8[8];
  SIZE MapCellSize;
  SIZE MapCellSize2;
  SIZE MapCellSize4;
  char Unknown9[64];
};
#pragma pack(pop)

/* 253 */
typedef T_GraphicsInfo *P_GraphicsInfo;

/* 255 */
#pragma pack(push, 1)
struct T_WindowStructure
{
  LONG Unknown1;
  HWND HWindow;
  char Unknown2[24];
  HICON Icon;
};
#pragma pack(pop)

/* 256 */
typedef T_WindowStructure *P_WindowStructure;

/* 257 */
typedef T_WindowInfo *P_WindowInfo;

/* 258 */
struct __unaligned __declspec(align(1)) T_GameParameters
{
  __int16 word_655AE8;
  int dword_655AEA;
  __int16 word_655AEE;
  __int16 MapFlags;
  __int16 word_655AF2;
  __int16 word_655AF4;
  __int16 word_655AF6;
  __int16 Turn;
  __int16 Year;
  __int16 word_655AFC;
  __int16 word_655AFE;
  __int16 word_655B00;
  char PlayerTribeNumber;
  char byte_655B03;
  char byte_655B04;
  char byte_655B05;
  char byte_655B06;
  char byte_655B07;
  char DifficultyLevel;
  char BarbarianActivity;
  char TribesLeftInPlay;
  char HumanPlayers;
  char byte_655B0C;
  char byte_655B0D;
  char byte_655B0E;
  char byte_655B0F;
  __int16 word_655B10;
  __int16 word_655B12;
  __int16 word_655B14;
  __int16 TotalUnits;
  __int16 TotalCities;
  __int16 word_655B1A;
  __int16 word_655B1C;
  char byte_655B1E[34];
  char byte_655B40;
  char byte_655B41[3];
  char byte_655B44;
};

/* 259 */
#pragma pack(push, 1)
struct T_Leader
{
  char Attack;
  char Expand;
  char Civilize;
  char Female;
  char byte_6554FC;
  char CitiesBuilt;
  __int16 Color;
  __int16 Style;
  __int16 word_655502;
  __int16 word_655504;
  __int16 word_655506;
  __int16 word_655508;
  __int16 word_65550A;
  __int16 word_65550C[14];
};
#pragma pack(pop)

/* 260 */
typedef T_Leader T_Leaders[21];

/* 261 */
#pragma pack(push, 1)
struct T_DrawInfo
{
  int Unknown0;
  HDC DeviceContext;
};
#pragma pack(pop)

/* 263 */
enum MACRO_SM
{
  SM_CXSCREEN = 0,
  SM_CYSCREEN = 1,
  SM_CXVSCROLL = 2,
  SM_CYHSCROLL = 3,
  SM_CYCAPTION = 4,
  SM_CXBORDER = 5,
  SM_CYBORDER = 6,
  SM_CXDLGFRAME = 7,
  SM_CYDLGFRAME = 8,
  SM_CYVTHUMB = 9,
  SM_CXHTHUMB = 10,
  SM_CXICON = 11,
  SM_CYICON = 12,
  SM_CXCURSOR = 13,
  SM_CYCURSOR = 14,
  SM_CYMENU = 15,
  SM_CXFULLSCREEN = 16,
  SM_CYFULLSCREEN = 17,
  SM_CYKANJIWINDOW = 18,
  SM_MOUSEPRESENT = 19,
  SM_CYVSCROLL = 20,
  SM_CXHSCROLL = 21,
  SM_DEBUG = 22,
  SM_SWAPBUTTON = 23,
  SM_RESERVED1 = 24,
  SM_RESERVED2 = 25,
  SM_RESERVED3 = 26,
  SM_RESERVED4 = 27,
  SM_CXMIN = 28,
  SM_CYMIN = 29,
  SM_CXSIZE = 30,
  SM_CYSIZE = 31,
  SM_CXFRAME = 32,
  SM_CYFRAME = 33,
  SM_CXMINTRACK = 34,
  SM_CYMINTRACK = 35,
  SM_CXDOUBLECLK = 36,
  SM_CYDOUBLECLK = 37,
  SM_CXICONSPACING = 38,
  SM_CYICONSPACING = 39,
  SM_MENUDROPALIGNMENT = 40,
  SM_PENWINDOWS = 41,
  SM_DBCSENABLED = 42,
  SM_CMOUSEBUTTONS = 43,
};

/* 264 */
#pragma pack(push, 1)
struct T_ControlInfoScroll
{
  int Unknown1;
  int Unknown2;
  P_WindowInfo WindowInfo;
  RECT Rect;
  HWND HWindow;
  __int8 Unknown6[12];
  int ProcRedraw;
  int ProcTrack;
  int PageSize;
  int Unknown5;
  int CurrentPosition;
};
#pragma pack(pop)

